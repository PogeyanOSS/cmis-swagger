{
	"info": {
		"_postman_id": "ffe80826-4a76-4a09-b19c-52fa054907a6",
		"name": "SwaggerApiRequest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForPostTypes",
							"item": [
								{
									"name": "PostSuccessCase(checking all propertyTypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f869033d-815f-4c83-ae3e-b27dd3fd85ce",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('single');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1,\r\n                    2,\r\n                    3,\r\n                    4\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\":false,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"ABC DEF\",\r\n                     \"GHI\",\r\n                     \"JKL\",\r\n                     \"MNO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"Productsdate\": {\r\n            \"id\": \"Productsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"Productsdate\",\r\n            \"queryName\": \"Productsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"MacProductsdate\": {\r\n            \"id\": \"MacProductsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"MacProductsdate\",\r\n            \"queryName\": \"MacProductsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        },\r\n         \"appleStatus\": {\r\n            \"id\": \"appleStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleStatus\",\r\n            \"queryName\": \"appleStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n         \"appleSubStatus\": {\r\n            \"id\": \"appleSubStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleSubStatus\",\r\n            \"queryName\": \"appleSubStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab2a9175-5842-4d13-8854-2a2ce30cb611",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under fv:salutation present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\", \r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"cmis:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForPostTypes",
							"item": [
								{
									"name": "PostErrorCaseType(removed Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5eedc245-e7b4-4c55-8485-4a2958040a6e",
												"exec": [
													"pm.test(\"removed id in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Bad Request\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62e492b7-3828-4d29-9e07-855b0be60cf3",
												"exec": [
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'char'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple2\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"char\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"char\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "764ac0cd-6e64-43bb-a1ff-18c11a92dda1",
												"exec": [
													"pm.test(\"removed cardinality in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'appleId'! Cardinality not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple3\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong property Type with Caps)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f3cae35-8917-493b-abd2-10ddbbe1c89f",
												"exec": [
													"pm.test(\"wrong propertyType with caps in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'STRING'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple4\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"STRING\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"String\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(given wrong propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e5e0be8-3531-45f5-94ec-2aa72f06e0b2",
												"exec": [
													"pm.test(\"changed propertyType in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'ABC'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple6\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"ABC\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"ABC\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"ABC\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorcase(given wrong cardinality value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "683c58ae-f0c9-4ea2-a741-1f7dcd28cf4d",
												"exec": [
													"pm.test(\"given wrong cardinality value in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'XYZ'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple7\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"XYZ\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"XYZ\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"XYZ\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cardinality and propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0996d1e-8e2a-4bdc-83c7-369e13ae2428",
												"exec": [
													"pm.test(\"removed updadability in all properties in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'appleId'! Data type not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple8\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed fv:partyType in Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "197e62fa-345d-4333-9660-173230c8a281",
												"exec": [
													"pm.test(\"removed id in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Bad Request\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"fv:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(fv:party removed cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04836a25-a13d-470f-a009-d265729c73ac",
												"exec": [
													"pm.test(\"removed cardinality in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'fv:party'! Cardinality not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"fv:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCasesForFolder",
									"item": [
										{
											"name": "PostFolderSuccessCase(Checking all th positive cases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking Folder under the objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking Folder under the name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderA');",
															"});",
															"pm.test(\"checking Folder under the objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking Folder under the baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking if folder has root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"FolderA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "44acacb9-46b1-4ce9-ae59-03d29b4dc7d9",
														"exec": [
															"pm.test(\"checking Folder under the name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Folder12');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"Folder12\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:baseTypeId\": \"cmis:folder\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "If we removed objectId it will create (objectId) automatically."
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1304988a-f49e-4b5b-bc98-1e6d08107986",
														"exec": [
															"pm.test(\"checking folder under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1A');",
															"});",
															"pm.test(\"checking folder under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderBA');",
															"});",
															"pm.test(\"checking document has correct parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/FolderBA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1A\",\r\n    \"cmis:name\": \"FolderBA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:parentId\":\"1\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fdfae8b4-2bc3-4618-a582-83d3fefa5abe",
														"exec": [
															"pm.test(\"checking folder under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1AC');",
															"});",
															"pm.test(\"checking folder under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderBAC');",
															"});",
															"pm.test(\"checking document has correct parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/FolderBAC');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1AC\",\r\n    \"cmis:name\": \"FolderBAC\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:parentId\":\"123\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dac85d74-fd50-4016-aca4-804a36724952",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3a0bc79-f430-4e02-af74-9c7a83521e1a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForFolder",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"cmis:objectId\": \"1B\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:baseTypeId\": \"cmis:folder\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1C\",\r\n    \"cmis:name\": \"FolderAC\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "if we remove objectTypeId it will show like this:\n  \"Type or type property must be set!\""
											},
											"response": []
										},
										{
											"name": "PostErrorCase(passing empty properties)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed all the json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "removed all the data show like this"
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given already existing name)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given already present objectId in TestCase\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, FolderA, is already present\\\"}\");",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1D\",\r\n    \"cmis:name\": \"FolderA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorcase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e536ffd5-30fd-4f97-a090-8b069a95da8d",
														"exec": [
															"pm.test(\"given wrong objectIdin Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, Cannot create a folder, with a non-folder type: cmis:document\\\"}\");",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1E\",\r\n    \"cmis:name\": \"FolderAB\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(wrong parentId in query)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "33fc666a-cfcf-43fd-92fc-5d7cb09cd7a6",
														"exec": [
															"pm.test(\"given wrong parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1F\",\r\n    \"cmis:name\": \"FolderABC\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=123",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "123"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "83df3d7f-a328-4124-b8da-24568e9610ff",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8acb47ba-7156-4f6c-9e36-b56c8df50cc8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all FOLDER related",
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCasesForDocument",
									"item": [
										{
											"name": "PostSuccessCase(Add a new cmis:document Object withoutfileTestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc1');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															"",
															"//without file testcase",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:versionSeriesCheckedOutBy\"]).to.eql([]);",
															"});",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:secondaryObjectTypeIds\"]).to.eql([]);",
															"});",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamId\"]).to.eql([]);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc1\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc');",
															"});",
															"pm.test(\"craete root assertion\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"Doc\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												},
												"description": "if we removed objectId in Body case it will auomatically create one rootId."
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(Add a new cmis:document Object, with folder as parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('82');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc3');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/Doc3');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "cmis:objectId",
															"value": "82",
															"type": "text"
														},
														{
															"key": "cmis:objectTypeId",
															"value": "cmis:document",
															"type": "text"
														},
														{
															"key": "cmis:name",
															"value": "Doc3",
															"type": "text"
														},
														{
															"key": "parentId",
															"value": "80",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(uploadDocument)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "972f3ec0-96f1-45fc-a980-c6917b670143",
														"exec": [
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
															"});",
															"pm.test(\"checking filename\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{FILE}}"
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A/uploadDocument",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A",
														"uploadDocument"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(Add a new cmis:document Object with file part in form data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "569597fd-247c-446d-866e-f8f1eb720bc9",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('123');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ABC');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/ABC');",
															"});",
															"",
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
															"});",
															"pm.test(\"checking filename\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "cmis:objectId",
															"value": "123",
															"type": "text"
														},
														{
															"key": "cmis:name",
															"value": "ABC",
															"type": "text"
														},
														{
															"key": "cmis:objectTypeId",
															"value": "cmis:document",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "{{FILE}}"
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										}
									],
									"description": "This is all POST related success cases",
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForDocment",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2B\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2C\",\r\n    \"cmis:name\": \"Doc2\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the json data in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed all the json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(with wrongparentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"passing a wrong parentId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2D\",\r\n    \"cmis:name\": \"Doc2\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document?parentId=55",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													],
													"query": [
														{
															"key": "parentId",
															"value": "55"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "This is post related error cases",
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all related to cmis:document(POST) ",
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCasesForItem",
									"item": [
										{
											"name": "PostSuccessCase(checking all positive cases &item with folder as parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking Item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemAB');",
															"});",
															"pm.test(\"checking Item under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"ItemAB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSucessCaseCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"ItemA\",\r\n    \"cmis:objectTypeId\": \"cmis:item\",\r\n    \"cmis:baseTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												},
												"description": "removed cmis:objectId it will create own rootId\n"
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "90a510a2-f797-43e0-9c91-ce0071fd85ce",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3B');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemABC');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3B\",\r\n    \"cmis:name\": \"ItemABC\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a47c6f2-6a58-4a4c-b0b4-6b0111da219a",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3ABC');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemABCD');",
															"});",
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3ABC\",\r\n    \"cmis:name\": \"ItemABCD\",\r\n    \"cmis:objectTypeId\": \"cmis:item\",\r\n    \"parentId\":\"1234\"\r\n}\r\n "
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForItem",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3C\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking objectTypeId present r not\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3D\",\r\n    \"cmis:name\": \"IitemCAB\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the json data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed all tha json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "928390e8-902c-4aa4-8eae-11e20ab4e521",
														"exec": [
															"pm.test(\"given wrong objectTypeId in Body\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Cannot create a folder, with a non-folder type: cmis:folder\"}');\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3E\",\r\n    \"cmis:name\": \"ItemABCD\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc3622c3-0065-4b6d-9fff-06e89a677dd7",
														"exec": [
															"pm.test(\"given wrong parentId \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3F\",\r\n    \"cmis:name\": \"ItemABE\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=145",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "145"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all item related ",
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCasesForPolicy",
									"item": [
										{
											"name": "PostSuccessCase(checking all positive TestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy');",
															"});",
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:objectId in Body and equals the cmis:name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"policyA\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3716140a-d423-4b08-8a7b-92d339290a18",
														"exec": [
															"pm.test(\"checking Policy under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking Policy under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4B');",
															"});",
															"pm.test(\"checking Policy under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyB');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4B\",\r\n    \"cmis:name\": \"policyB\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1cc7ac6d-2d84-4ebe-9aec-510da142b489",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4AB');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyAB');",
															"});",
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking Item under the cmis:policyText present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4AB\",\r\n    \"cmis:name\": \"policyAB\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\",\r\n    \"parentId\":\"12345\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForPolicy",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4C\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed cmis:policyText in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4D\",\r\n    \"cmis:name\": \"policyD\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed alla the json data in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "633a0e5f-47f5-485c-afb4-08c64e7d4de2",
														"exec": [
															" pm.test(\"given wrong objectTypeId in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Cannot create a policy, with a non-folder type: cmis:item\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4E\",\r\n    \"cmis:name\": \"policyE\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorcase(given wrong parentId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b836256-e92e-48a2-84a8-39114051703d",
														"exec": [
															"pm.test(\" given wrong \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4F\",\r\n    \"cmis:name\": \"policyF\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=156",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "156"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all policy related",
							"_postman_isSubFolder": true
						}
					],
					"description": "Post Api's concerning BaseTypes ie cmis:folder, cmis:document, cmis:item, cmis:policy, cmis:relationship_ext",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa655a69-6cef-4a42-ba00-a6bbf40ee216",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "047066ef-0d21-4b65-b0ae-ab931cae4e18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SucessCaseForCustomTypes",
							"item": [
								{
									"name": "PostSuccessCase(Checking all the TestCases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under appleName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under appleId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customTypeId under appleProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under productsType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductA');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under iMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under eMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleSubStatus\"]).to.eql([0,1,9]);",
													"});",
													"pm.test(\"checking customTypeId checking customTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\t\"iBookProducts_type\"]).to.eql(\"GHI\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidBE\",\r\n\"cmis:objectId\": \"11AC\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"iBookProducts_type\":\"GHI\",\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1,9]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(removed cmis:objectId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"removed objectId in Body and equals to cmis:name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidF');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidF\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(uploadDocument)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fb1327d-0b5d-4e82-9a6a-65b1cf9ba215",
												"exec": [
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
													"});",
													"pm.test(\"uploading a document present r not, filename check\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{FILE}}"
												}
											]
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC/uploadDocument",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC",
												"uploadDocument"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(Added Formdata)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe3bde17-0dae-4f10-985a-609de484c34f",
												"exec": [
													"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1234');",
													"});",
													"pm.test(\"checking document under the cmis:name present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ABCD');",
													"});",
													"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
													"});",
													"pm.test(\"checking document root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/ABCD');",
													"});",
													"pm.test(\"checking property\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('Fruit');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "cmis:objectId",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "cmis:name",
													"value": "ABCD",
													"type": "text"
												},
												{
													"key": "cmis:objectTypeId",
													"value": "apple",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{FILE}}"
												},
												{
													"key": "appleName",
													"value": "Fruit",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(with correct parentId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a071c4bf-19af-42b2-ac6d-d90a227c8325",
												"exec": [
													"pm.test(\"checking customType under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11B');",
													"});",
													"pm.test(\"checking customType under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customType under the cmis:name present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidG');",
													"});",
													"pm.test(\"checking customType has correct parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/AndroidG');",
													"});",
													"pm.test(\"checking customType has correct parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidG\",\r\n\"cmis:objectId\": \"11B\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple?parentId=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											],
											"query": [
												{
													"key": "parentId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(checking cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a0792c5-c5c3-4de8-95ec-2454f49b4142",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11C');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidK');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking document root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidK');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidK\",\r\n\"cmis:objectId\": \"11C\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef51eb33-bb3f-4c49-9d10-93114ce7abe6",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohini');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"checking customTypeId  under Date present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\t\"fv:partyDate\"]).to.eql(1355270400000);",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true,\r\n\t\"fv:partyDate\":[1355270400000]\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCasesForCustomTypes",
							"item": [
								{
									"name": "PostErrorCase(removed cmis:name in Body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"removed cmis:name in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.contains('java.lang.NullPointerException');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:objectId\": \"11C\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cmis:objectTypeId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidL\",\r\n\"cmis:objectId\": \"11D\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"removed all the json data in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"Properties must not be empty!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong parentId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca000c34-c145-4567-be3f-16deeb2c7b8c",
												"exec": [
													"pm.test(\"passing a wrong parentId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, Object is null\\\"}\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"5\",\r\n    \"cmis:name\": \"Android\",\r\n    \"cmis:objectTypeId\": \"apple\",\r\n    \"appleName\": \"987\",\r\n    \"appleId\": \"apple\"\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/apple?parentId=55",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											],
											"query": [
												{
													"key": "parentId",
													"value": "55"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErroeCase(fv:party removed cmis:name)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8994886e-ccf3-491a-bacf-5d8b0998aea9",
												"exec": [
													"pm.test(\"removed cmis:name in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.contains('java.lang.NullPointerException');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(fv:party removed cmis:objectTypeId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb3142b4-12b8-4b29-9f41-0ef1d1158ff0",
												"exec": [
													"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d58767-f046-4718-8e2f-5bc4b835122a",
												"exec": [
													"pm.test(\"removed all the json data in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"Properties must not be empty!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "723b5b7f-9f4c-4e44-9f16-4da9efcb0bb6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed22057b-7e8e-4d18-af07-cea19b23a2b3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ACL",
					"item": [
						{
							"name": "AddAcl",
							"item": [
								{
									"name": "SuccessCasesForAddAcl",
									"item": [
										{
											"name": "AddAcesCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking AddAces under the principalId  present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[1].principalId).to.eql('hr');",
															"});",
															"pm.test(\"checking AddAces under the permisiions present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[1].permissions[0]).to.eql('cmis:all');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForAddAcl",
									"item": [
										{
											"name": "AddAcesErrorCase(removed principalId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed principalId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: principalId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(removed permissions)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed permissions in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: permission must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hrdep\",\r\n  \"objectId\": \"3\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(removed objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: objectId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hrdep\",\r\n  \"permission\": \"cmis:all\"\r\n\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(Removed all the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed all the data \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Empty Properties!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "RemoveAcl",
							"item": [
								{
									"name": "PostSuccessCaseForRemoveAcl",
									"item": [
										{
											"name": "PostSuccessCase(Aces)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking removeAces under the permisiions present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[0].permissions[0]).to.eql('cmis:all');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "PostErrorCaseForRemoveAcl",
									"item": [
										{
											"name": "PostErrorCase(removed principalId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed principalId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: principalId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed permissions)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed permissions in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: permission must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: objectId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"removed all the json data in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Empty Properties!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "All post related Apis"
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForGetTypes",
							"item": [
								{
									"name": "GetSuccessCaseForTypes(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "124e6c11-5ab2-4035-a2e9-d10b4d0ca6f7",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('single');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTypesAllSuccessCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c62a897-5808-4b9b-afb4-31422acff309",
												"exec": [
													"pm.test(\"checking customTypeId under relationship present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"id\"]).to.eql('cmis_ext:relationship');",
													"});",
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"propertyDefinitions\"][\"cmis:objectId\"].id).to.eql('cmis:objectId');",
													"});",
													"pm.test(\"checking customTypeId under folder present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis:folder\"].id).to.eql('cmis:folder');",
													"});",
													"pm.test(\"checking customTypeId under folder present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis:folder\"][\"propertyDefinitions\"][\"cmis:objectId\"].id).to.eql('cmis:objectId');",
													"});",
													"pm.test(\"checking customTypeId under config present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis_ext:config\"].id).to.eql('cmis_ext:config');",
													"});",
													"pm.test(\"checking customTypeId under config present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis_ext:config\"][\"propertyDefinitions\"][\"cmis:name\"].id).to.eql('cmis:name');",
													"});",
													"pm.test(\"checking customTypeId under document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:document\"].id).to.eql('cmis:document');",
													"});",
													"pm.test(\"checking customTypeId under document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:document\"][\"propertyDefinitions\"][\"cmis:isImmutable\"].id).to.eql('cmis:isImmutable');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:item\"].id).to.eql('cmis:item');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:item\"][\"propertyDefinitions\"][\"cmis:objectTypeId\"].id).to.eql('cmis:objectTypeId');",
													"});",
													"",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:policy\"].id).to.eql('cmis:policy');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:policy\"][\"propertyDefinitions\"][\"cmis:lastModificationDate\"].id).to.eql('cmis:lastModificationDate');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:relationship\"].id).to.eql('cmis:relationship');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:relationship\"][\"propertyDefinitions\"][\"cmis:sourceId\"].id).to.eql('cmis:sourceId');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/all",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d73916b-2c8f-486b-9290-90fbf1747c9c",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under ud present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking the id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetTypes",
							"item": [
								{
									"name": "ErrorCaseForTypes(wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc8f847c-afd2-4526-954f-00220fd48cb1",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.eql('java.lang.Exception: Type: apple12 not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple12",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple12"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTypeallErrorCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "609f2bf7-41ad-46a2-baee-5aa0a5a640a7",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.Exception: Type: all not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/all",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetErrorCase(fv:party given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "288b5feb-b17c-44f1-8b87-1965e389dfbf",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partydvvv not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Apartydvvv",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Apartydvvv"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForGetDocument",
									"item": [
										{
											"name": "GetDocumentSuccessCase(checking cmis:name)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking document under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc1');",
															"});",
															"pm.test(\"checking document under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea7cbe42-00a8-49ed-aa24-d1f1b86fcc29",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6732f7f4-9d05-4c2a-9c5f-c2fa4df4f032",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetDocument",
									"item": [
										{
											"name": "GetDocumentErrorCase(given wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/25",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"25"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDocumentErrorCase(given wrong cmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "25eed1f6-2d25-41ec-baa3-a596c105666c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "88cadd6a-a8e9-4474-812a-057a5632f515",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForGetAllDocument",
									"item": [
										{
											"name": "getAllSuccessCase(skipcount=0&maxitems=1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a74e1f6f-d5c5-4f2d-85b1-5a130590e068",
														"exec": [
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(skipcount=0&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42e6a899-067f-435c-851e-9538fe9d2777",
														"exec": [
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSucessCase(skipcount=1&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "81b0d07b-5e29-45b3-aa3f-b6592ac87bce",
														"exec": [
															"",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=1&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "1"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(checking filter)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6bbbbfad-1914-4ea7-ae80-be86f8cff767",
														"exec": [
															"pm.test(\"checking  document under filter \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
															"});",
															"pm.test(\"checking  document under filter\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"iBookProducts_type\"]).to.eql('GHI');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/apple/getAll?filter= *, iBookProducts_type eq GHI",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "filter",
															"value": " *, iBookProducts_type eq GHI"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(checking orderby)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc3976c8-6cfb-4539-9d69-f360c4fc4fca",
														"exec": [
															"pm.test(\"checking  document under orderby \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/apple/getAll?orderby= cmis:name asc",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "orderby",
															"value": " cmis:name asc"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetAllDocument",
									"item": [
										{
											"name": "getAllErrorCase (skipcount &maxitems)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fa14b03-b739-4ed3-91d0-e4bd5bff8ab3",
														"exec": [
															"pm.test(\"checking customTypes under skipcount=0 and maxitems=0\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"java.lang.IllegalArgumentException: itemsPerPage must be > 0!\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=0",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForMediaType",
									"item": [
										{
											"name": "when no media exists for existing object",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ab4eaa6-3fda-476f-85f0-76a8da12759f",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/82",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"82"
													]
												}
											},
											"response": []
										},
										{
											"name": "Getdocument/media(upload document)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d44093aa-aafd-4681-bd5f-2075a9b9dd1f",
														"exec": [
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('ABCXYZ');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForMediaType",
									"item": [
										{
											"name": "GetErrorCase(wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "63fe3a6d-eb81-401f-b038-f810650be009",
														"exec": [
															"pm.test(\"given wrong objectId in URL\", function () {",
															"    var jsonData =pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/22A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"22A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForGetFolder",
									"item": [
										{
											"name": "GetFolderSuccessCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42cb5123-49f7-444e-94c7-b89c332919b3",
														"exec": [
															"pm.test(\"checking customTypeId under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking customTypeId under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderA');",
															"});",
															"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA');",
															"});",
															"pm.test(\"checking customTypeId under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetFolder",
									"item": [
										{
											"name": "GetFolderErrorCase( given wrong cmis:objectId In URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67e85375-930b-4df6-9cd7-9c6fd3de51cf",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/12",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"12"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFolderErrorCase(given wrongcmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1eca972d-ff17-477f-84d9-26403813b9d4",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFolderErrorCase(cmis:baseTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1a543ea6-7d5f-45b0-8354-c2b4925525e8",
														"exec": [
															"pm.test(\"given wrong URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/12",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"12"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForGetAllType",
									"item": [
										{
											"name": "getAllFolderSuccessCase(skipcount=0&maxitems=1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8328a0a3-dfc3-45fb-8e8e-949ae44093de",
														"exec": [
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=2&maxitems=3)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73c76486-550b-4c2b-9093-c56a38e00fe8",
														"exec": [
															"pm.test(\"checking folder under skipcount=2 and maxitems=3\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking folder under skipcount=2 and maxitems=3\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=2&maxitems=3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "2"
														},
														{
															"key": "maxitems",
															"value": "3"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=1&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "65c05cf5-f44f-440b-b9d6-c729f4731536",
														"exec": [
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=1&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "1"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=0&maxitems=0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e37368e6-0358-4c54-a390-6ff14d32b8ed",
														"exec": [
															"pm.test(\"checking folder under skipcount=0 and maxitems=0\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"java.lang.IllegalArgumentException: itemsPerPage must be > 0!\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=0&maxitems=0",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GetSuccessCase(checking filter)",
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/apple/getAll?filter=*,appleName,appleName eq APPY",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "filter",
															"value": "*,appleName,appleName eq APPY"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetAllType",
									"item": [
										{
											"name": "GetFolderErrorCase(removed TypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31aec0e7-2e39-4ad7-bb3f-814c4f1088a5",
														"exec": [
															"pm.test(\"removed TypeId in URL\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"skipcount=0&maxitems=1"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForGetItem",
									"item": [
										{
											"name": "GetItemSuccessCase(checking cmis:objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking item under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemAB');",
															"});",
															"pm.test(\"checking item under cmis:objectTypeId present r not\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking item under cmis:baseTypeId present r not\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetItem",
									"item": [
										{
											"name": "GetItemErrorCase(wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/33",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"33"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetItemErrorCase(wrong cmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"3A"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetItemErrorCase(wrong URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"45"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForGetPolicy",
									"item": [
										{
											"name": "GetPolicySuccessCase(cmis:objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetPolicy",
									"item": [
										{
											"name": "GetPolicyErrorCase(wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/44",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"44"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetPolicyErrorCase(wrong cmis:baseTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"45"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetPolicyErrorCase(wrong cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4fdadbe9-698b-4f72-b07e-1711c08cd5f8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "967c45bc-4c7d-4f18-937f-3b201ecb2b5c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForGetCustomTypes",
							"item": [
								{
									"name": "GetCustomTypeSuccessCase(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under Id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {},
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSucessCase(fv:checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42555fbb-58ce-4653-834c-5c659f6eea80",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohini');",
													"});",
													"pm.test(\"checking customTypeId under mail present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under Type present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under TypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetTypeCutomTypes",
							"item": [
								{
									"name": "GetCustomTypeErrorCase(wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4c8e679-e79d-4bfc-9e7a-3e439bfbdc72",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: book not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/book/1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"book",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCustomTypeErrorCase(wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2172922-7bc5-4b88-b40e-7ebf11546e08",
												"exec": [
													"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/cmis:folder/6",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"cmis:folder",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetErrorCase(given wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d84b075a-c77a-4dfd-99d8-3b269e3f8fd6",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partytype not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:partytype/21",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:partytype",
												"21"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SuccessCaseForGetAllTypeCustomTypes",
							"item": [
								{
									"name": "getAllCustomTypeSuccessCase(skipcount=0&maxitems=1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa628362-16f7-4967-85b7-806c29c65c62",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/getAll?skipcount=0&maxitems=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "0"
												},
												{
													"key": "maxitems",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CustomTypeSuccessCase(download document)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f352a2e-aa10-4b4a-ae9d-4041f691039b",
												"exec": [
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData).to.eql('ABCXYZ');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/media/1234",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"media",
												"1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAllSucessCase(skipcount=1&maxitems=1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5338dd7e-291b-4ed6-8bd6-adbe44aba71e",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:name\"]).to.eql('AndroidF');",
													"});",
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:path\"]).to.eql('/apple/AndroidF');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/getAll?skipcount=1&maxitems=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "1"
												},
												{
													"key": "maxitems",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSuccessCase(noskip&nomaxitems)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "816e9b84-5fc9-43ea-8eea-63b261938629",
												"exec": [
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/getAll",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetAllTypeCustomTypes",
							"item": [
								{
									"name": "getAllErrorCase(skipcount=0&maxitems=0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0cb9ec1-6547-43ea-9639-6f05c9972c67",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/pen1/getAll?skipcount=0&maxitems=0",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen1",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "0"
												},
												{
													"key": "maxitems",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "All GET related Api's"
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForTypes",
							"item": [
								{
									"name": "PutSuccessCaseTypes(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbbae9f3-aa74-4130-a2d8-14ac3f37e083",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacBookPros.id).to.eql('powerMacBookPros');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacBookPros.propertyType).to.eql('uri');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.id).to.eql('powerMacPro');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.propertyType).to.eql('uri');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1,\r\n                    2,\r\n                    3,\r\n                    4\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\":false,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"ABC DEF\",\r\n                     \"GHI\",\r\n                     \"JKL\",\r\n                     \"MNO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"Productsdate\": {\r\n            \"id\": \"Productsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"Productsdate\",\r\n            \"queryName\": \"Productsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"MacProductsdate\": {\r\n            \"id\": \"MacProductsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"MacProductsdate\",\r\n            \"queryName\": \"MacProductsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n         \"appleStatus\": {\r\n            \"id\": \"appleStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleStatus\",\r\n            \"queryName\": \"appleStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n         \"appleSubStatus\": {\r\n            \"id\": \"appleSubStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleSubStatus\",\r\n            \"queryName\": \"appleSubStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                },\r\n                {\r\n                    \"displayName\": \"Error\",\r\n                    \"value\": [\r\n                       4\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "324dfe63-9413-452e-9cb1-d39e6727f4bd",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyroute\"][\"propertyType\"]).to.eql('string');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"cmis:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyroute\": {\r\n        \"id\": \"fv:partyroute\",\r\n        \"displayName\": \"partyroute\",\r\n        \"queryName\": \"fv:partyroute\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForTypes",
							"item": [
								{
									"name": "PutErrorCaseForTypes(wrong TypeId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "561c89f7-0867-4503-b645-37e9c80e7570",
												"exec": [
													"pm.test(\"given wrong id in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"appleI\",\r\n                    \"appleII\",\r\n                    \"appleIPO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"powerBookProducts\": {\r\n            \"id\": \"powerBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerBookProducts\",\r\n            \"queryName\": \"powerBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"powerMacProducts\": {\r\n            \"id\": \"powerMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacProducts\",\r\n            \"queryName\": \"powerMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/pen90",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"pen90"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorcase(given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d6acd7e-4fb3-471c-8363-eaaf5bc32cad",
												"exec": [
													"pm.test(\"given wrong in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: _metadata not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"appleI\",\r\n                    \"appleII\",\r\n                    \"appleIPO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"powerBookProducts\": {\r\n            \"id\": \"powerBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerBookProducts\",\r\n            \"queryName\": \"powerBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"powerMacProducts\": {\r\n            \"id\": \"powerMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacProducts\",\r\n            \"queryName\": \"powerMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "ErrorCaseForTypes(remove all the data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b458805-81e2-4818-a696-59537de80e79",
												"exec": [
													"pm.test(\"remove all the data in Body \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid base type: null\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:party removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2527698d-85ec-4e60-b266-80902998e1d0",
												"exec": [
													"pm.test(\"remove all the data in Body \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid base type: null\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:party removed TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efbeff6c-e19a-48c7-b38a-782e091d63b7",
												"exec": [
													"pm.test(\"given wrong in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.IllegalArgumentException: Invalid repository ot type ID!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForPutFolder",
									"item": [
										{
											"name": "PutSuccessCase(checking all the Testcases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c13276ab-c888-487b-ac6c-7af3e01bc7b7",
														"exec": [
															"pm.test(\"checking folder under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Folder1');",
															"});",
															"pm.test(\"checking folder under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking folder under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking if folder has root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Folder1');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"Folder1\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8dc86448-76ae-4a50-8493-d017bf969801",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3fb9635d-a393-43d2-a97c-4b892db59307",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutFolder",
									"item": [
										{
											"name": "PutErrorCase(given wrong objecrtId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6cf3980-7a65-42f8-9630-cf3fbca25c71",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in  URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"FolderAB\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/4",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"4"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(given wrong objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a227159-4f0d-4db6-8205-057a9465b418",
														"exec": [
															"pm.test(\"given wrong baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"90\",\r\n    \"cmis:name\": \"jsdfbsjdfb\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/90",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"90"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(removedupdated properties in  the json body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "282706ed-db08-483c-b393-b3b4b1c9c953",
														"exec": [
															"pm.test(\"given correct URL and removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForPutDocument",
									"item": [
										{
											"name": "PutDocumentSuccessCase(Checking all positive cases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"checking document under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc12');",
															"});",
															"pm.test(\"checking document under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under cmis:path present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc12');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutDocument",
									"item": [
										{
											"name": "PutDocumentErrorCase(given wrong objectId URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutDocumentErrorCase( given wrong cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b929d5c-fa31-47b5-b27a-2600fb4e74a5",
														"exec": [
															"pm.test(\"given wrong baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"2"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcase(removedupdated properties&removed all the json data in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e6219e6-59f4-44ae-9ddd-f45001b55b99",
														"exec": [
															"pm.test(\" given correct and removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForPutItem",
									"item": [
										{
											"name": "PutItemSuccessCase(checking all the positive TestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a1d019d0-82d2-4c61-af77-7f2fd09f2c05",
														"exec": [
															"pm.test(\"checking item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Item3AB');",
															"});",
															"pm.test(\"checking item under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking item under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95900a5e-4360-467b-adfd-18e8a5320409",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f5f3a5d-d15c-4550-96d9-d30d30a0fae2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutItem",
									"item": [
										{
											"name": "PutErrorCaseItem(given wrong objectId inURL &body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e3028de9-cf90-4c64-8016-f37554f9742b",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL and Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"6\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcaseItem(given wrong ObjectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af59056a-9318-4759-9eb4-65e37acf1fcb",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(removed updtae properties in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9656c183-bf61-4885-bd36-aac86190b2a9",
														"exec": [
															"pm.test(\"given correct URL and removed all th json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForPutPolicy",
									"item": [
										{
											"name": "PutSuccessCasepolicy(checking all the positive Testcases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "81246493-6ea0-4815-8ca5-642e7cc65600",
														"exec": [
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('AB');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutPolicy",
									"item": [
										{
											"name": "PutErrorcasePolicy(given wrong objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6dbbd4db-2fac-4033-873c-70e0b7f8f042",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/70",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"70"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCasePolicy(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3b2a6ff4-970d-4628-afd4-259b7ed656b2",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/78",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"78"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcase(removedupdated properties&removed all the json data in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4be0d203-8722-4d8e-bfc9-e9e2670794dd",
														"exec": [
															"pm.test(\"removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "075637dc-a8fd-4018-9d00-06df06485ab2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "261dd6c9-cb05-4604-b797-88040a5bdd35",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForCustomTypes",
							"item": [
								{
									"name": "SuccessCaseCustomType(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cecadef4-efdc-4d76-b543-36f0c2e4e38c",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under appleName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under appleId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('2012');",
													"});",
													"pm.test(\"checking customTypeId under appleProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under productsType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductABC');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under iMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under eMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidBE\",\r\n\"cmis:objectId\": \"11AC\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"2012\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductABC\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 6,\r\n\"appleSubStatus\" : [0,1,9]\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutSuccessCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bc0f0e5-d221-4bc0-b7b4-a8f85903ae87",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohinik');",
													"});",
													"pm.test(\"checking customTypeId under party_email present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('partyAB');",
													"});",
													"pm.test(\"checking customTypeId under partyName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under salutation present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under party_office_phone present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohinik\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"partyAB\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true,\r\n\t\"fv:partyDate\":[1355270400000]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf464ae2-ab31-4130-bcbc-92a515c3e334",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aaa29901-ec9c-4e54-8a9e-82bd06f90055",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForCustomTypes",
							"item": [
								{
									"name": "ErrorCaseCustomType(given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b1c6743-c5f3-470e-a0e6-2780ba6fd173",
												"exec": [
													"pm.test(\"given wrong typeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: pen1 not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"apple\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/pen1/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen1",
												"22"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c8a4d4a-8580-4c3e-89ce-8925e5b4fc41",
												"exec": [
													"pm.test(\" given correct URL removed all the json data in body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/apple/5",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:type given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6333808-9b5d-41e9-96c2-bc9c2bb7e404",
												"exec": [
													"pm.test(\"given wrong typeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.Exception: Type: fv:folder not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"partyABC\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_lastName\":\"kambam\",\r\n    \"fv:party_email\": \"rohini.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"PartyA\",\r\n    \"fv:partyName\":\"birthday\",\r\n    \"fv:partyHall\":\"SVC\",\r\n    \"cmis:baseTypeId\": \"cmis:item\"\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/fv:folder/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:folder",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "All PUT related Api's"
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DocumentSuccessCase ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99f33f2a-0482-4ef8-b350-fbf1b43d85d2",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"2A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DocumentErrorCase(given wrong id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99f33f2a-0482-4ef8-b350-fbf1b43d85d2",
														"exec": [
															"pm.test(\"given wrong id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "DocumentErrorCase(given wrong id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99f33f2a-0482-4ef8-b350-fbf1b43d85d2",
														"exec": [
															"pm.test(\"given already deleted  id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type Missmatch or object not found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "47c9105d-499e-4e93-88fe-41a27289a43f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ed88fb1-e0c3-452e-a967-85c728b35515",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87115229-b977-4c55-a976-fe2c1c711403",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"1 Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCase ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87115229-b977-4c55-a976-fe2c1c711403",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCase(given wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e2cb6d7-adf0-421d-ad08-9f4ebf74cfcf",
														"exec": [
															"pm.test(\"given wrong id \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"3"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCaseItem",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e7698cf-e7df-4046-a40e-57d371b659a5",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"3A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCaseItem ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e7698cf-e7df-4046-a40e-57d371b659a5",
														"exec": [
															"pm.test(\"given alraedy deleted id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCaseItem (given wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e7698cf-e7df-4046-a40e-57d371b659a5",
														"exec": [
															"pm.test(\"given wrong id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/35",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"35"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCasePolicy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2a3d8d4-dd0e-4c6b-96bf-d886fc81cfc5",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"4A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCasePolicy(given wrong Id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2a3d8d4-dd0e-4c6b-96bf-d886fc81cfc5",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/44",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"44"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCasePolicy(given wrong objectTypeId) ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2a3d8d4-dd0e-4c6b-96bf-d886fc81cfc5",
														"exec": [
															"pm.test(\"given wrong objectTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: cmis:Item not present!\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:Item/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:Item",
														"45"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3206302-1597-4609-bc86-fa1e3e1237e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7eda4389-23ce-493a-8e85-2dbf8141cd97",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForCustomType",
							"item": [
								{
									"name": "DeleteSuccessCaseForCustomObject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2d95717-d504-4751-b01f-3d222a0919e1",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"11AC Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteSuccessCase(fv:type )",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1a9342e-bdf4-4a73-96b9-e20dfb749f80",
												"exec": [
													"pm.test(\"deleted objectId Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"22 Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForCustomTypes",
							"item": [
								{
									"name": "DeleteCustom TypeErrorCase(given wrong TypeId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d6dd8bb-73ef-4a2b-b4d3-7f51a6dc8291",
												"exec": [
													"pm.test(\"given wrong TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: pen56 not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/pen56/5",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen56",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteErrorCase(fv:type given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a8afd3e-ed83-456f-b15b-1c887eac2e39",
												"exec": [
													"pm.test(\"given wrong id in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partyught not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:partyught/28",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:partyught",
												"28"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseforDeleteType",
							"item": [
								{
									"name": "DeleteSuccessCaseforType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee5781f9-aabe-46cb-b214-fcb5d1d06d50",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"apple Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteSuccesCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ef8bb80-e0a7-45c9-9757-32cb188e4d7c",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"fv:party Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForDeleteType",
							"item": [
								{
									"name": "DeleteErrorcase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "028ea32a-c8ab-4752-81e3-e70c1d43e567",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple18",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple18"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteErrorCaseForTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff29749-590b-403f-8fe8-e287594fdf05",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: _metadata not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/apple18",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"apple18"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "All DELETE realted Api's testing"
		}
	]
}