{
	"info": {
		"_postman_id": "c69ff89f-55ca-4ae3-b642-0829c3a2df5d",
		"name": "SwaggerApiRequest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PreRequisites",
			"item": [
				{
					"name": "LoginDetails",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2c8d4bf-c6cf-4bf7-b8b6-5b0067cc0a1d",
								"exec": [
									"var obj =\r",
									"{\r",
									"        \"email\": pm.globals.get(\"email\"),\r",
									"        \"password\": pm.globals.get(\"password\")\r",
									"}\r",
									"\r",
									"pm.globals.set(\"LoginRawBody\",JSON.stringify(obj))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3b8aa02d-08d7-4ac2-93e4-249fdf3e0479",
								"exec": [
									"pm.test(\"setting repoId, username, passowrd from login details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"USERNAME\",jsonData[\"userAttributes\"][\"userId\"])",
									"    pm.globals.set(\"PASSWORD\",jsonData[\"token\"])",
									"    pm.globals.set(\"REPOID\",jsonData[\"repository\"][0])",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{LoginRawBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST_URL}}login",
							"host": [
								"{{HOST_URL}}login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForPostTypes",
							"item": [
								{
									"name": "PostSuccessCase(checking all propertyTypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace63bcc-44f4-4149-b871-5738b7191049",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('single');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1,\r\n                    2,\r\n                    3,\r\n                    4\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\":false,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"ABC DEF\",\r\n                     \"GHI\",\r\n                     \"JKL\",\r\n                     \"MNO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"Productsdate\": {\r\n            \"id\": \"Productsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"Productsdate\",\r\n            \"queryName\": \"Productsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"MacProductsdate\": {\r\n            \"id\": \"MacProductsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"MacProductsdate\",\r\n            \"queryName\": \"MacProductsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        },\r\n         \"appleStatus\": {\r\n            \"id\": \"appleStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleStatus\",\r\n            \"queryName\": \"appleStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n         \"appleSubStatus\": {\r\n            \"id\": \"appleSubStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleSubStatus\",\r\n            \"queryName\": \"appleSubStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7058b7b-6eb9-4fa0-9ffb-8c14521418df",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under fv:salutation present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\", \r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"cmis:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForPostTypes",
							"item": [
								{
									"name": "PostErrorCaseType(removed Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "250ad3b4-052c-4877-a83a-c282f15dc479",
												"exec": [
													"pm.test(\"removed id in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Bad Request\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8037efe-a343-4914-b9e9-00f92fa4934c",
												"exec": [
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'char'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple2\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"char\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"char\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ef772f-4167-4ead-9ee9-18c6c76db393",
												"exec": [
													"pm.test(\"removed cardinality in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'appleId'! Cardinality not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple3\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong property Type with Caps)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "086c9ef3-daa3-475c-8a0d-f09bedf66f4c",
												"exec": [
													"pm.test(\"wrong propertyType with caps in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'STRING'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple4\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"STRING\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"String\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(given wrong propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d13ce212-137c-452f-a5d2-5c4a09506068",
												"exec": [
													"pm.test(\"changed propertyType in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'ABC'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple6\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"ABC\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"ABC\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"ABC\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorcase(given wrong cardinality value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "733e6e03-eccf-4743-8af2-17b996ec5242",
												"exec": [
													"pm.test(\"given wrong cardinality value in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid enum value 'XYZ'!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple7\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"XYZ\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                  \"displayName\": \"ProductType\",\r\n                  \"value\": [\r\n                    \"apple\"\r\n                  ]\r\n                }\r\n              ]\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"XYZ\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"XYZ\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cardinality and propertyType)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6542816-fa51-4a8f-8d96-6a00108c8a36",
												"exec": [
													"pm.test(\"removed updadability in all properties in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'appleId'! Data type not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"apple8\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed fv:partyType in Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c75afa66-3a9d-4de3-9960-6ecd91b9da42",
												"exec": [
													"pm.test(\"removed id in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Bad Request\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"fv:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(fv:party removed cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3a985d9-711c-44fd-8d6b-2f48ba85c19a",
												"exec": [
													"pm.test(\"removed cardinality in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisRuntimeException: Invalid property type 'fv:party'! Cardinality not set!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"fv:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCasesForFolder",
									"item": [
										{
											"name": "PostFolderSuccessCase(Checking all th positive cases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69eebc22-8d18-4a81-a769-a34f31806d2f",
														"exec": [
															"pm.test(\"checking Folder under the objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking Folder under the name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderA');",
															"});",
															"pm.test(\"checking Folder under the objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking Folder under the baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking if folder has root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"FolderA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c1983f5-4522-4f4a-b95f-a85f7190defa",
														"exec": [
															"pm.test(\"checking Folder under the name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Folder12');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"Folder12\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:baseTypeId\": \"cmis:folder\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "If we removed objectId it will create (objectId) automatically."
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d03bd5e-1399-4a1c-8927-c2aa4fa58df6",
														"exec": [
															"pm.test(\"checking folder under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1A');",
															"});",
															"pm.test(\"checking folder under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderBA');",
															"});",
															"pm.test(\"checking document has correct parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/FolderBA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1A\",\r\n    \"cmis:name\": \"FolderBA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:parentId\":\"1\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1f92441e-8164-424e-804a-b17904886080",
														"exec": [
															"pm.test(\"checking folder under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1AC');",
															"});",
															"pm.test(\"checking folder under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderBAC');",
															"});",
															"pm.test(\"checking document has correct parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/FolderBAC');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1AC\",\r\n    \"cmis:name\": \"FolderBAC\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:parentId\":\"123\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7a43e3e9-ef53-4765-9cb0-ccbbc0118eae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02e25b51-8cba-407c-b421-29f8be320d38",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForFolder",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84768c28-5ae0-482f-b9a6-de338908adbd",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"cmis:objectId\": \"1B\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\",\r\n    \"cmis:baseTypeId\": \"cmis:folder\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e3adca3c-1dd6-4dd9-9618-0700e643e007",
														"exec": [
															"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1C\",\r\n    \"cmis:name\": \"FolderAC\"\r\n  }"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "if we remove objectTypeId it will show like this:\n  \"Type or type property must be set!\""
											},
											"response": []
										},
										{
											"name": "PostErrorCase(passing empty properties)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e160de9-ba23-40e3-bedc-f97b1662ca28",
														"exec": [
															"pm.test(\"removed all the json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												},
												"description": "removed all the data show like this"
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given already existing name)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a47b40d-ae20-46f2-828b-8e31b5255117",
														"exec": [
															"pm.test(\"given already present objectId in TestCase\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, FolderA, is already present\\\"}\");",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1D\",\r\n    \"cmis:name\": \"FolderA\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorcase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b9f18dc8-f956-40a1-8c9f-8649d6ec9d3e",
														"exec": [
															"pm.test(\"given wrong objectIdin Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, Cannot create a folder, with a non-folder type: cmis:document\\\"}\");",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1E\",\r\n    \"cmis:name\": \"FolderAB\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(wrong parentId in query)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a95f7c46-fac4-4fa8-afd9-553e1324c296",
														"exec": [
															"pm.test(\"given wrong parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1F\",\r\n    \"cmis:name\": \"FolderABC\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder?parentId=123",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder"
													],
													"query": [
														{
															"key": "parentId",
															"value": "123"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6ba6c72-7ad2-4bed-8518-fb684e206398",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6a1e91a7-db02-4fef-98c2-bc8d138ed01e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all FOLDER related",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCasesForDocument",
									"item": [
										{
											"name": "PostSuccessCase(Add a new cmis:document Object withoutfileTestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9e348bde-05cb-49b4-9bc8-e9d1eeee8c60",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc1');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															"",
															"//without file testcase",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:versionSeriesCheckedOutBy\"]).to.eql([]);",
															"});",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:secondaryObjectTypeIds\"]).to.eql([]);",
															"});",
															"pm.test(\"checking document under the file present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamId\"]).to.eql([]);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc1\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a50bf21c-d0ba-4926-9b55-7d89c6b75074",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc');",
															"});",
															"pm.test(\"craete root assertion\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"Doc\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												},
												"description": "if we removed objectId in Body case it will auomatically create one rootId."
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(Add a new cmis:document Object, with folder as parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73b5dfee-f1dc-422c-890f-5e4c5bb4e8f4",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('82');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc3');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/Doc3');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "cmis:objectId",
															"value": "82",
															"type": "text"
														},
														{
															"key": "cmis:objectTypeId",
															"value": "cmis:document",
															"type": "text"
														},
														{
															"key": "cmis:name",
															"value": "Doc3",
															"type": "text"
														},
														{
															"key": "parentId",
															"value": "80",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(uploadDocument)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8b296758-43cc-4d85-8b35-fcee9e5d9e85",
														"exec": [
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
															"});",
															"pm.test(\"checking filename\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{FILE}}"
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A/uploadDocument",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A",
														"uploadDocument"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(Add a new cmis:document Object with file part in form data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df24bfb0-a50c-4682-9783-48f29e5816dd",
														"exec": [
															"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('123');",
															"});",
															"pm.test(\"checking document under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ABC');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/ABC');",
															"});",
															"",
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
															"});",
															"pm.test(\"checking filename\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "cmis:objectId",
															"value": "123",
															"type": "text"
														},
														{
															"key": "cmis:name",
															"value": "ABC",
															"type": "text"
														},
														{
															"key": "cmis:objectTypeId",
															"value": "cmis:document",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "{{FILE}}"
														}
													]
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										}
									],
									"description": "This is all POST related success cases",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForDocment",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2489eb4-81be-47fc-95d8-f9da977efc49",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2B\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2599109a-aba8-4341-b00d-b05828dd118a",
														"exec": [
															"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2C\",\r\n    \"cmis:name\": \"Doc2\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the json data in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d26d1639-3a4b-4605-a54c-131c079ccf32",
														"exec": [
															"pm.test(\"removed all the json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(with wrongparentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "94f62a21-5ad8-454d-9500-dc31e7bd2129",
														"exec": [
															"pm.test(\"passing a wrong parentId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2D\",\r\n    \"cmis:name\": \"Doc2\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document?parentId=55",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document"
													],
													"query": [
														{
															"key": "parentId",
															"value": "55"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "This is post related error cases",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all related to cmis:document(POST) ",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCasesForItem",
									"item": [
										{
											"name": "PostSuccessCase(checking all positive cases &item with folder as parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "39d48b9b-0c55-4eaf-80b2-7261681bcbb9",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking Item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemAB');",
															"});",
															"pm.test(\"checking Item under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"ItemAB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSucessCaseCase(removed cmis:objectId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1830eab3-07a9-45b4-ba9e-c831647f401f",
														"exec": [
															"pm.test(\"checking item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"ItemA\",\r\n    \"cmis:objectTypeId\": \"cmis:item\",\r\n    \"cmis:baseTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												},
												"description": "removed cmis:objectId it will create own rootId\n"
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "74695183-380a-43a8-b135-bc2a4c960970",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3B');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemABC');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3B\",\r\n    \"cmis:name\": \"ItemABC\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aeeedbd5-0e26-43f0-8f61-bf540077bc15",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3ABC');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemABCD');",
															"});",
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3ABC\",\r\n    \"cmis:name\": \"ItemABCD\",\r\n    \"cmis:objectTypeId\": \"cmis:item\",\r\n    \"parentId\":\"1234\"\r\n}\r\n "
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForItem",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fe85969-30f5-41de-8d47-754a8e51d47c",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3C\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in Body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c1d13ae9-b9e8-45ae-b9f6-f58af44d0f50",
														"exec": [
															"pm.test(\"checking objectTypeId present r not\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3D\",\r\n    \"cmis:name\": \"IitemCAB\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the json data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7d5e28b-93f9-45c1-bf54-b66ad81f7b8f",
														"exec": [
															"pm.test(\"removed all tha json data\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "393dfe2d-2371-4a18-9a8f-87f9caed277a",
														"exec": [
															"pm.test(\"given wrong objectTypeId in Body\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Cannot create a folder, with a non-folder type: cmis:folder\"}');\r",
															"});\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3E\",\r\n    \"cmis:name\": \"ItemABCD\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong parentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23dfc841-9e3c-461b-8900-fd6288c3d5ca",
														"exec": [
															"pm.test(\"given wrong parentId \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3F\",\r\n    \"cmis:name\": \"ItemABE\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item?parentId=145",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item"
													],
													"query": [
														{
															"key": "parentId",
															"value": "145"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all item related ",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCasesForPolicy",
									"item": [
										{
											"name": "PostSuccessCase(checking all positive TestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11a2b96e-a2dc-49f9-87bc-537689c7a716",
														"exec": [
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy');",
															"});",
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(removed cmis:objectId in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dec29822-712e-4942-81ec-057f8f7bbe3b",
														"exec": [
															"pm.test(\"removed cmis:objectId in Body and equals the cmis:name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyA');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:name\": \"policyA\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(given correct ParentId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "022ca3a4-9968-4441-abba-64d655ca1dd1",
														"exec": [
															"pm.test(\"checking Policy under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking Policy under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4B');",
															"});",
															"pm.test(\"checking Policy under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyB');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4B\",\r\n    \"cmis:name\": \"policyB\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PostSuccessCase(correct parentId in query but wrong parentId in properties body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c770dff-156d-4586-9b3f-a177005e7668",
														"exec": [
															"pm.test(\"checking Item under the cmis:objectId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4AB');",
															"});",
															"pm.test(\"checking Item under the cmis:name present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policyAB');",
															"});",
															"pm.test(\"checking Item under the cmis:objectTypeId present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking Item under the cmis:policyText present or not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4AB\",\r\n    \"cmis:name\": \"policyAB\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"A\",\r\n    \"parentId\":\"12345\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCasesForPolicy",
									"item": [
										{
											"name": "PostErrorCase(removed cmis:name in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54468936-6e18-4ab6-b98b-726cca1c9799",
														"exec": [
															"pm.test(\"removed cmis:name in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.contains('NullPointerException');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4C\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed cmis:objectTypeId in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87b3ebce-60bd-4faf-b1ea-c1d4b0f4c45e",
														"exec": [
															"pm.test(\"removed cmis:policyText in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4D\",\r\n    \"cmis:name\": \"policyD\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed all the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e541ac80-c4e5-4904-b7a1-129bd82006cb",
														"exec": [
															"pm.test(\"removed alla the json data in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('Properties must not be empty!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1751339e-a74a-417f-b3af-fe00f3c4d9fb",
														"exec": [
															" pm.test(\"given wrong objectTypeId in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Cannot create a policy, with a non-folder type: cmis:item\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4E\",\r\n    \"cmis:name\": \"policyE\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorcase(given wrong parentId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e0b3039-8859-448d-8e01-c2aa4ed0a3f0",
														"exec": [
															"pm.test(\" given wrong \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('{\"message\":\"null, Object is null\"}');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4F\",\r\n    \"cmis:name\": \"policyF\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy?parentId=156",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy"
													],
													"query": [
														{
															"key": "parentId",
															"value": "156"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "This is all policy related",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Post Api's concerning BaseTypes ie cmis:folder, cmis:document, cmis:item, cmis:policy, cmis:relationship_ext",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "504aaf15-3091-4e7c-92f7-4ccc512d975a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56f1c602-bae4-418e-9245-3de8499c816c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SucessCaseForCustomTypes",
							"item": [
								{
									"name": "PostSuccessCase(Checking all the TestCases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6a8f4a8-7d2f-4799-bbf2-2ea7188db359",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under appleName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under appleId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customTypeId under appleProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under productsType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductA');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under iMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under eMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleSubStatus\"]).to.eql([0,1,9]);",
													"});",
													"pm.test(\"checking customTypeId checking customTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\t\"iBookProducts_type\"]).to.eql(\"GHI\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidBE\",\r\n\"cmis:objectId\": \"11AC\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"iBookProducts_type\":\"GHI\",\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1,9]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(removed cmis:objectId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3bd0642-9ac4-4630-ab68-ada57f03ef04",
												"exec": [
													"pm.test(\"removed objectId in Body and equals to cmis:name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidF');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidF\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(uploadDocument)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1144780a-1d1f-4b2c-9378-0247dbabedac",
												"exec": [
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:contentStreamMimeType\"]).to.eql('text/plain');",
													"});",
													"pm.test(\"uploading a document present r not, filename check\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:contentStreamFileName\"]).to.eql('hello');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{FILE}}"
												}
											]
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC/uploadDocument",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC",
												"uploadDocument"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(Added Formdata)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f554fea-f2ca-4b5e-89f3-3084eba63e38",
												"exec": [
													"pm.test(\"checking document under the cmis:objectTypeId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking document under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1234');",
													"});",
													"pm.test(\"checking document under the cmis:name present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ABCD');",
													"});",
													"pm.test(\"checking document under the cmis:baseTypeId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
													"});",
													"pm.test(\"checking document root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/ABCD');",
													"});",
													"pm.test(\"checking property\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('Fruit');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "cmis:objectId",
													"value": "1234",
													"type": "text"
												},
												{
													"key": "cmis:name",
													"value": "ABCD",
													"type": "text"
												},
												{
													"key": "cmis:objectTypeId",
													"value": "apple",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{FILE}}"
												},
												{
													"key": "appleName",
													"value": "Fruit",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(with correct parentId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9bd6a08-3960-4b61-9f6c-cc7bea8d7ed7",
												"exec": [
													"pm.test(\"checking customType under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11B');",
													"});",
													"pm.test(\"checking customType under the cmis:objectId present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customType under the cmis:name present or not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidG');",
													"});",
													"pm.test(\"checking customType has correct parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA/AndroidG');",
													"});",
													"pm.test(\"checking customType has correct parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidG\",\r\n\"cmis:objectId\": \"11B\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple?parentId=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											],
											"query": [
												{
													"key": "parentId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(checking cardinality)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f26e2e1-1486-4be5-af9f-aaa2840842fb",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11C');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidK');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking document root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidK');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidK\",\r\n\"cmis:objectId\": \"11C\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 1,\r\n\"appleSubStatus\" : [0,1]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78a20177-ed7b-479b-a7cf-64521e8e87d9",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohini');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"checking customTypeId  under Date present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\t\"fv:partyDate\"]).to.eql(1355270400000);",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true,\r\n\t\"fv:partyDate\":[1355270400000]\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCasesForCustomTypes",
							"item": [
								{
									"name": "PostErrorCase(removed cmis:name in Body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dc39e2e-fce8-4821-9dc6-0033b2c99369",
												"exec": [
													"pm.test(\"removed cmis:name in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.contains('java.lang.NullPointerException');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:objectId\": \"11C\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed cmis:objectTypeId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c587d08-a4b6-4e16-b9ee-d4896ec52951",
												"exec": [
													"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidL\",\r\n\"cmis:objectId\": \"11D\",\r\n\"appleId\":\"201\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductA\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2]\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93a9ef90-84fe-4876-a7e3-56c23c8f9574",
												"exec": [
													"pm.test(\"removed all the json data in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"Properties must not be empty!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(wrong parentId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b337de1-dbf3-4584-af03-f143d1db42d4",
												"exec": [
													"pm.test(\"passing a wrong parentId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"{\\\"message\\\":\\\"null, Object is null\\\"}\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"5\",\r\n    \"cmis:name\": \"Android\",\r\n    \"cmis:objectTypeId\": \"apple\",\r\n    \"appleName\": \"987\",\r\n    \"appleId\": \"apple\"\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/apple?parentId=55",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple"
											],
											"query": [
												{
													"key": "parentId",
													"value": "55"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErroeCase(fv:party removed cmis:name)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78a7e098-7a9d-49f4-a2e1-7602476e0b5c",
												"exec": [
													"pm.test(\"removed cmis:name in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.contains('java.lang.NullPointerException');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(fv:party removed cmis:objectTypeId in body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "827c3b8e-0ffe-4eb7-bd09-1139b256c0b1",
												"exec": [
													"pm.test(\"removed cmis:objectTypeId in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('Type or type property must be set!');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5a678a1-0c16-4970-8489-1ed7ff2b5267",
												"exec": [
													"pm.test(\"removed all the json data in Body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"Properties must not be empty!\");",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([503]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bc5794e-24ea-4abe-9481-14890d39849a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7577738c-2faf-4c93-b796-68b0842c35b1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ACL",
					"item": [
						{
							"name": "AddAcl",
							"item": [
								{
									"name": "SuccessCasesForAddAcl",
									"item": [
										{
											"name": "AddAcesCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10920ccf-902d-4694-be2d-dab2fec41fc5",
														"exec": [
															"pm.test(\"checking AddAces under the principalId  present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[1].principalId).to.eql('hr');",
															"});",
															"pm.test(\"checking AddAces under the permisiions present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[1].permissions[0]).to.eql('cmis:all');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForAddAcl",
									"item": [
										{
											"name": "AddAcesErrorCase(removed principalId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87b9d771-8b48-4d76-9404-734f0f4dcfc1",
														"exec": [
															"pm.test(\"removed principalId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: principalId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(removed permissions)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5ba80bc3-f13d-41c1-8cfa-625e7606bb82",
														"exec": [
															"pm.test(\"removed permissions in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: permission must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hrdep\",\r\n  \"objectId\": \"3\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(removed objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "886adaf4-664c-4a84-8fd5-5849c92293a2",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: objectId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hrdep\",\r\n  \"permission\": \"cmis:all\"\r\n\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "AddAcesErrorCase(Removed all the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4b26883a-dc22-48fe-b94f-77dacf03dd8f",
														"exec": [
															"pm.test(\"removed all the data \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Empty Properties!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/addAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"addAcl"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "RemoveAcl",
							"item": [
								{
									"name": "PostSuccessCaseForRemoveAcl",
									"item": [
										{
											"name": "PostSuccessCase(Aces)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "80e94901-a574-4435-9bfd-627e34870d1d",
														"exec": [
															"pm.test(\"checking removeAces under the permisiions present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.aces[0].permissions[0]).to.eql('cmis:all');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PostErrorCaseForRemoveAcl",
									"item": [
										{
											"name": "PostErrorCase(removed principalId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7272986b-c604-4c8e-9b71-0d4d1cea587e",
														"exec": [
															"pm.test(\"removed principalId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: principalId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"permission\": \"cmis:all\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed permissions)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "333a54a0-5f01-4389-8576-5b1b6d5aebb7",
														"exec": [
															"pm.test(\"removed permissions in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: permission must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"objectId\": \"3A\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "721906c2-a33e-4500-91bd-2665ef3e4fbe",
														"exec": [
															"pm.test(\"removed objectId in Body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: objectId must be present!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"principalId\": \"hr\",\r\n  \"permission\": \"cmis:all\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										},
										{
											"name": "PostErrorCase(removed the data)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2dbf7ba8-5d66-4ce9-94ce-ed6e173f33d5",
														"exec": [
															"pm.test(\"removed all the json data in Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Empty Properties!!');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([503]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/acl/removeAcl",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"acl",
														"removeAcl"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "All post related Apis",
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForGetTypes",
							"item": [
								{
									"name": "GetSuccessCaseForTypes(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8623d568-e53b-4bb1-a78a-7677d6ca73df",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('single');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTypesAllSuccessCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fba6a0c-c3d6-44b0-a821-8d8b3e4c6b35",
												"exec": [
													"pm.test(\"checking customTypeId under relationship present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"id\"]).to.eql('cmis_ext:relationship');",
													"});",
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"propertyDefinitions\"][\"cmis:objectId\"].id).to.eql('cmis:objectId');",
													"});",
													"pm.test(\"checking customTypeId under folder present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis:folder\"].id).to.eql('cmis:folder');",
													"});",
													"pm.test(\"checking customTypeId under folder present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis:folder\"][\"propertyDefinitions\"][\"cmis:objectId\"].id).to.eql('cmis:objectId');",
													"});",
													"pm.test(\"checking customTypeId under config present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis_ext:config\"].id).to.eql('cmis_ext:config');",
													"});",
													"pm.test(\"checking customTypeId under config present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData [\"cmis_ext:config\"][\"propertyDefinitions\"][\"cmis:name\"].id).to.eql('cmis:name');",
													"});",
													"pm.test(\"checking customTypeId under document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:document\"].id).to.eql('cmis:document');",
													"});",
													"pm.test(\"checking customTypeId under document present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:document\"][\"propertyDefinitions\"][\"cmis:isImmutable\"].id).to.eql('cmis:isImmutable');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:item\"].id).to.eql('cmis:item');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:item\"][\"propertyDefinitions\"][\"cmis:objectTypeId\"].id).to.eql('cmis:objectTypeId');",
													"});",
													"",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:policy\"].id).to.eql('cmis:policy');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:policy\"][\"propertyDefinitions\"][\"cmis:lastModificationDate\"].id).to.eql('cmis:lastModificationDate');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:relationship\"].id).to.eql('cmis:relationship');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:relationship\"][\"propertyDefinitions\"][\"cmis:sourceId\"].id).to.eql('cmis:sourceId');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/all",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b50ce44-12a2-4fb8-8d76-359fa9c31066",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under ud present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking the id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking the choice present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetTypes",
							"item": [
								{
									"name": "ErrorCaseForTypes(wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aade1982-7855-4e94-8780-3eec534fd6b0",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.eql('java.lang.Exception: Type: apple12 not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple12",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple12"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTypeallErrorCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a91d977-456b-4faf-9e39-0aefaf2d1d87",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.Exception: Type: all not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/_metadata/type/all",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetErrorCase(fv:party given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4edb65b-5bd7-4e8a-8913-a79693da4b00",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partydvvv not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Apartydvvv",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Apartydvvv"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForGetDocument",
									"item": [
										{
											"name": "GetDocumentSuccessCase(checking cmis:name)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b3e13e0-70ba-44e6-843a-6c36af1558bb",
														"exec": [
															"pm.test(\"checking document under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc1');",
															"});",
															"pm.test(\"checking document under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under the cmis:baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc1');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bc309845-bf0b-4896-8a44-8ca94882811a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4094858-25b8-4b35-9792-d3f7c334cabc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetDocument",
									"item": [
										{
											"name": "GetDocumentErrorCase(given wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23d13dd3-830d-43eb-b8cd-07c7a5948e23",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/25",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"25"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDocumentErrorCase(given wrong cmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45a5052c-b72d-43f5-a437-649a36f01f30",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:item/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1747ab77-e9bc-49ac-8867-15865329e648",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5aeacb22-209a-4b84-9673-47bea8999f9f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForGetAllDocument",
									"item": [
										{
											"name": "getAllSuccessCase(skipcount=0&maxitems=1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cab04ecc-d3bc-4dd7-8ad1-3b11381aadb9",
														"exec": [
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(skipcount=0&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84ec668c-50df-44ea-b001-152a529995e4",
														"exec": [
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=0 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSucessCase(skipcount=1&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a72ebd6-8b6e-4645-a6a8-99c95c7b8fca",
														"exec": [
															"",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking document under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=1&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "1"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(checking filter)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5193f7f-bfa0-4ff9-871e-daf82f98032b",
														"exec": [
															"pm.test(\"checking  document under filter \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
															"});",
															"pm.test(\"checking  document under filter\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"iBookProducts_type\"]).to.eql('GHI');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/apple/getAll?filter= *, iBookProducts_type eq GHI",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "filter",
															"value": " *, iBookProducts_type eq GHI"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllSuccessCase(checking orderby)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5df54c1-332e-4a78-891b-c9b7207d0d6f",
														"exec": [
															"pm.test(\"checking  document under orderby \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/apple/getAll?orderby= cmis:name asc",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "orderby",
															"value": " cmis:name asc"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetAllDocument",
									"item": [
										{
											"name": "getAllErrorCase (skipcount &maxitems)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c14a95-ebaf-4e6a-b86f-4aa7253011c4",
														"exec": [
															"pm.test(\"checking customTypes under skipcount=0 and maxitems=0\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"java.lang.IllegalArgumentException: itemsPerPage must be > 0!\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/getAll?skipcount=0&maxitems=0",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForMediaType",
									"item": [
										{
											"name": "when no media exists for existing object",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9cb8a34-964b-4646-8f54-2c7379a6db14",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/82",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"82"
													]
												}
											},
											"response": []
										},
										{
											"name": "Getdocument/media(upload document)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "88684641-40bd-45dc-8fbd-013419ac6007",
														"exec": [
															"pm.test(\"uploading a document present r not\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('ABCXYZ');",
															"});",
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForMediaType",
									"item": [
										{
											"name": "GetErrorCase(wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "993cfd82-0539-434f-b4b9-4be7e8255f83",
														"exec": [
															"pm.test(\"given wrong objectId in URL\", function () {",
															"    var jsonData =pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:document/media/22A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"media",
														"22A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForGetFolder",
									"item": [
										{
											"name": "GetFolderSuccessCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "292e963b-f2ff-4df3-a9f5-3b4088cc1de5",
														"exec": [
															"pm.test(\"checking customTypeId under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking customTypeId under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('FolderA');",
															"});",
															"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking document root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/FolderA');",
															"});",
															"pm.test(\"checking customTypeId under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetFolder",
									"item": [
										{
											"name": "GetFolderErrorCase( given wrong cmis:objectId In URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "68a735f4-f607-47e3-a2b0-6a25c9406cdb",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/12",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"12"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFolderErrorCase(given wrongcmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78d3f104-59b2-4192-b41b-f903d6e5803b",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:policy/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFolderErrorCase(cmis:baseTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a51766b1-dd33-4b0d-80e8-09a0d667b944",
														"exec": [
															"pm.test(\"given wrong URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:item/12",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"12"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "SuccessCaseForGetAllType",
									"item": [
										{
											"name": "getAllFolderSuccessCase(skipcount=0&maxitems=1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9fa5e948-fc56-40ca-956c-ebeb663e5aa4",
														"exec": [
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:name\"]).to.eql('cmis_ext:relationmd');",
															"});",
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking folder under skipcount=0 and maxitems=1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationmd\"][\"cmis:path\"]).to.eql('/cmis_ext:relationmd');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=2&maxitems=3)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "be7963ce-aef0-4352-9fbd-0a1fa8349d9b",
														"exec": [
															"pm.test(\"checking folder under skipcount=2 and maxitems=3\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking folder under skipcount=2 and maxitems=3\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=2&maxitems=3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "2"
														},
														{
															"key": "maxitems",
															"value": "3"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=1&maxitems=2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8eb41dd4-afd1-4ae4-8060-fe418a0691bf",
														"exec": [
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:name\"]).to.eql('cmis_ext:relationship');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:relationship\"][\"cmis:path\"]).to.eql('/cmis_ext:relationship');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:name\"]).to.eql('cmis_ext:config');",
															"});",
															"pm.test(\"checking folder under skipcount=1 and maxitems=2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis_ext:config\"][\"cmis:path\"]).to.eql('/cmis_ext:config');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=1&maxitems=2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "1"
														},
														{
															"key": "maxitems",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getAllFolderSuccessCase(skipcount=0&maxitems=0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "90f156d0-d4db-4c44-a385-ef4359502428",
														"exec": [
															"pm.test(\"checking folder under skipcount=0 and maxitems=0\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"java.lang.IllegalArgumentException: itemsPerPage must be > 0!\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/getAll?skipcount=0&maxitems=0",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"getAll"
													],
													"query": [
														{
															"key": "skipcount",
															"value": "0"
														},
														{
															"key": "maxitems",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GetSuccessCase(checking filter)",
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/apple/getAll?filter=*,appleName,appleName eq APPY",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"apple",
														"getAll"
													],
													"query": [
														{
															"key": "filter",
															"value": "*,appleName,appleName eq APPY"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetAllType",
									"item": [
										{
											"name": "GetFolderErrorCase(removed TypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b69faf1d-952f-4aed-8b27-d5f75abcd740",
														"exec": [
															"pm.test(\"removed TypeId in URL\", function () {",
															"    var jsonData = pm.response.text();",
															"    pm.expect(jsonData).to.eql('\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\"');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{requestURL}}/cmis:folder/skipcount=0&maxitems=1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"skipcount=0&maxitems=1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForGetItem",
									"item": [
										{
											"name": "GetItemSuccessCase(checking cmis:objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a136cf87-880f-4bfa-9d96-fb70a0c02e0d",
														"exec": [
															"pm.test(\"checking item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking item under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('ItemAB');",
															"});",
															"pm.test(\"checking item under cmis:objectTypeId present r not\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking item under cmis:baseTypeId present r not\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetItem",
									"item": [
										{
											"name": "GetItemErrorCase(wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f248df4-533b-4a37-8bb1-35460c19ce55",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:item/33",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"33"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetItemErrorCase(wrong cmis:objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb8d8a83-06b2-4cd1-9f0d-7a5999b53374",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:policy/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"3A"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetItemErrorCase(wrong URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0658e227-e1bd-4e85-86d1-6c8936a30139",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:document/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"45"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForGetPolicy",
									"item": [
										{
											"name": "GetPolicySuccessCase(cmis:objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ed7662f-d07e-4ad8-98cf-52b323e2bf14",
														"exec": [
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('A');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForGetPolicy",
									"item": [
										{
											"name": "GetPolicyErrorCase(wrong cmis:objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f1a8f64-b65f-4563-a24b-587ec5ea3e67",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:policy/44",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"44"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetPolicyErrorCase(wrong cmis:baseTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b520122c-ccbe-4ae7-95f1-c2985da1467b",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:document/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"45"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetPolicyErrorCase(wrong cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "edddff53-77e5-408f-a7da-1a406633fb3b",
														"exec": [
															"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.Exception: Type Missmatch');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{requestURL}}/cmis:item/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acb3f626-6692-493c-92a9-a85baa7fff72",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89a30d33-4b36-4dbc-83ca-d93f0ca6a609",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForGetCustomTypes",
							"item": [
								{
									"name": "GetCustomTypeSuccessCase(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a1ea08c-84eb-44c6-a17e-d302e49d9dd1",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under Id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('201');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSucessCase(fv:checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4814ed59-587e-42cc-be98-3b513d73cc39",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohini');",
													"});",
													"pm.test(\"checking customTypeId under mail present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under Type present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under TypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetTypeCutomTypes",
							"item": [
								{
									"name": "GetCustomTypeErrorCase(wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0a9051d-2c7b-42f3-a16e-8c70e6e28c9c",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: book not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/book/1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"book",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCustomTypeErrorCase(wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecb32d7b-bdee-40d1-958e-1355fe50d5b7",
												"exec": [
													"pm.test(\"given wrong cmis:baseTypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/cmis:folder/6",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"cmis:folder",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetErrorCase(given wrong TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bdcd813-2e07-4347-91f5-29390ed39dae",
												"exec": [
													"pm.test(\"given wrong cmis:TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partytype not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/fv:partytype/21",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:partytype",
												"21"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "SuccessCaseForGetAllTypeCustomTypes",
							"item": [
								{
									"name": "getAllCustomTypeSuccessCase(skipcount=0&maxitems=1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b13f0e35-2ce8-4c3e-b784-89922f3bb716",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/getAll?skipcount=0&maxitems=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "0"
												},
												{
													"key": "maxitems",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CustomTypeSuccessCase(download document)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3d2d1f1-a966-489b-8cfc-6d253ebdabf7",
												"exec": [
													"pm.test(\"uploading a document present r not\", function () {",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData).to.eql('ABCXYZ');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/apple/media/1234",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"media",
												"1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAllSucessCase(skipcount=1&maxitems=1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "baf604a0-01e3-4b6d-b310-3e94747dd345",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:name\"]).to.eql('AndroidF');",
													"});",
													"pm.test(\"checking customTypes under skipcount=1 and maxitems=1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidF\"][\"cmis:path\"]).to.eql('/apple/AndroidF');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/apple/getAll?skipcount=1&maxitems=1",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "1"
												},
												{
													"key": "maxitems",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSuccessCase(noskip&nomaxitems)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47181d04-1c1c-4150-b01e-653fd839392a",
												"exec": [
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypes under no skip&no maxitems\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"AndroidBE\"][\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/apple/getAll",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"getAll"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForGetAllTypeCustomTypes",
							"item": [
								{
									"name": "getAllErrorCase(skipcount=0&maxitems=0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55e613cb-b160-4013-b405-a4dd2cb419de",
												"exec": [
													"pm.test(\"checking customTypes under skipcount=0 and maxitems=0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{requestURL}}/pen1/getAll?skipcount=0&maxitems=0",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen1",
												"getAll"
											],
											"query": [
												{
													"key": "skipcount",
													"value": "0"
												},
												{
													"key": "maxitems",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "All GET related Api's",
			"protocolProfileBehavior": {}
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseForTypes",
							"item": [
								{
									"name": "PutSuccessCaseTypes(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e13ab99b-79d0-42ea-bcf8-ec338183b799",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleId.id).to.eql('appleId');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleName.id).to.eql('appleName');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.id).to.eql('appleProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.appleProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.id).to.eql('productsType');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.propertyType).to.eql('string');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.productsType.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.id).to.eql('iMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.iMacProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.id).to.eql('eMacProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.propertyType).to.eql('integer');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.eMacProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.id).to.eql('macBookproProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookproProducts.cardinality).to.eql('single');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.id).to.eql('macBookProducts');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.propertyType).to.eql('boolean');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.macBookProducts.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.id).to.eql('Productsdate');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.propertyType).to.eql('datetime');",
													"});",
													"pm.test(\"checking customTypeId under cardinality present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.Productsdate.cardinality).to.eql('multi');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacBookPros.id).to.eql('powerMacBookPros');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacBookPros.propertyType).to.eql('uri');",
													"});",
													"pm.test(\"checking customTypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.id).to.eql('powerMacPro');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.propertyType).to.eql('uri');",
													"});",
													"pm.test(\"checking customTypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.propertyDefinitions.powerMacPro.cardinality).to.eql('multi');",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1,\r\n                    2,\r\n                    3,\r\n                    4\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\":false,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"ABC DEF\",\r\n                     \"GHI\",\r\n                     \"JKL\",\r\n                     \"MNO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"Productsdate\": {\r\n            \"id\": \"Productsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"Productsdate\",\r\n            \"queryName\": \"Productsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"MacProductsdate\": {\r\n            \"id\": \"MacProductsdate\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"MacProductsdate\",\r\n            \"queryName\": \"MacProductsdate\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n         \"appleStatus\": {\r\n            \"id\": \"appleStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleStatus\",\r\n            \"queryName\": \"appleStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n         \"appleSubStatus\": {\r\n            \"id\": \"appleSubStatus\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleSubStatus\",\r\n            \"queryName\": \"appleSubStatus\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Start\",\r\n                    \"value\": [\r\n                        0\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Stop\",\r\n                    \"value\": [\r\n                       1\r\n                    ]\r\n                },\r\n\t\t\t\t{\r\n                    \"displayName\": \"Complete\",\r\n                    \"value\": [\r\n                       3\r\n                    ]\r\n                },\r\n                {\r\n                    \"displayName\": \"Error\",\r\n                    \"value\": [\r\n                       4\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutSuccessCase(fv:party checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96e9041c-d834-4b5e-b43c-784d5d281047",
												"exec": [
													"pm.test(\"checking TypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql('fv:party');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyName\"][\"id\"]).to.eql('fv:partyName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:salutation\"][\"id\"]).to.eql('fv:salutation');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyType\"][\"id\"]).to.eql('fv:partyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_firstName\"][\"id\"]).to.eql('fv:party_firstName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_lastName\"][\"id\"]).to.eql('fv:party_lastName');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_email\"][\"id\"]).to.eql('fv:party_email');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:party_office_phone\"][\"id\"]).to.eql('fv:party_office_phone');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:contactType\"][\"id\"]).to.eql('fv:contactType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:isPartyType\"][\"id\"]).to.eql('fv:isPartyType');",
													"});",
													"pm.test(\"checking TypeId under id present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"id\"]).to.eql('fv:partyDate');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyDate\"][\"propertyType\"]).to.eql('datetime');",
													"});",
													"pm.test(\"checking TypeId under propertyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"propertyDefinitions\"][\"fv:partyroute\"][\"propertyType\"]).to.eql('string');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"fv:party\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNameSpace\",\r\n    \"displayName\": \"fv:party\",\r\n    \"queryName\": \"fv:party\",\r\n    \"description\": \"Party\",\r\n    \"baseId\": \"cmis:item\",\r\n    \"parentId\": \"cmis:item\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"typeMutability\": {\r\n        \"canCreate\": true,\r\n        \"canUpdate\": true\r\n    },\r\n    \"propertyDefinitions\": {\r\n        \"fv:partyId\": {\r\n            \"id\": \"fv:party\",\r\n            \"displayName\": \"party Id\",\r\n            \"queryName\": \"partyId\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"fv:partyName\": {\r\n            \"id\": \"fv:partyName\",\r\n            \"displayName\": \"fv:partyName\",\r\n            \"queryName\": \"fv:partyName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true\r\n        },\r\n        \"fv:salutation\": {\r\n            \"id\": \"fv:salutation\",\r\n            \"displayName\": \"Salutation\",\r\n            \"queryName\": \"fv:salutation\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"Salutation\",\r\n                    \"value\": [\r\n                        \"Mr\",\r\n                        \"Ms\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:partyType\": {\r\n            \"id\": \"fv:partyType\",\r\n            \"displayName\": \"fv:partyType\",\r\n            \"queryName\": \"fv:partyType\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": false,\r\n            \"orderable\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"PartyType\",\r\n                    \"value\": [\r\n                        \"PartyA\",\r\n                        \"PartyB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_firstName\": {\r\n            \"id\": \"fv:party_firstName\",\r\n            \"displayName\": \"First Name\",\r\n            \"queryName\": \"fv:party_firstName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n\t\t\"fv:party_middleName\": {\r\n            \"id\": \"fv:party_middleName\",\r\n            \"displayName\": \"middle Name\",\r\n            \"queryName\": \"fv:party_middleName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"fv:party_lastName\": {\r\n            \"id\": \"fv:party_lastName\",\r\n            \"displayName\": \"Last Name\",\r\n            \"queryName\": \"fv:party_lastName\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"party_lastName\",\r\n                    \"value\": [\r\n                        \"PartyA_firstName\",\r\n                        \"PartyB_middleName\",\r\n\t\t\t\t\t\t\"PartyC_lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"fv:party_email\": {\r\n            \"id\": \"fv:party_email\",\r\n            \"displayName\": \"Email Address\",\r\n            \"queryName\": \"fv:party_email\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n        \"fv:party_office_phone\": {\r\n            \"id\": \"fv:party_office_phone\",\r\n            \"displayName\": \"Office Phone\",\r\n            \"queryName\": \"fv:party_office_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"fv:party_cell_phone\": {\r\n            \"id\": \"fv:party_cell_phone\",\r\n            \"displayName\": \"Cell Phone\",\r\n            \"queryName\": \"fv:party_cell_phone\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n    \"fv:contactType\": {\r\n        \"id\": \"fv:contactType\",\r\n        \"displayName\": \"fv:contactType\",\r\n        \"queryName\": \"fv:contactType\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"required\": true,\r\n        \"queryable\": true,\r\n        \"orderable\": true,\r\n        \"choice\": [\r\n            {\r\n                \"displayName\": \"ContactType\",\r\n                \"value\": [\r\n                    \"ServiceProvider\",\r\n                    \"CoffeeBoard\",\r\n                    \"Buyer\"\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n\t\"fv:isPartyType\": {\r\n        \"id\": \"fv:isPartyType\",\r\n        \"displayName\": \"isPartyType\",\r\n        \"queryName\": \"fv:isPartyType\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"PartyType\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n\t\t},\r\n\t\t\"fv:isParty\": {\r\n        \"id\": \"fv:isParty\",\r\n        \"displayName\": \"isParty\",\r\n        \"queryName\": \"fv:isParty\",\r\n        \"propertyType\": \"boolean\",\r\n        \"cardinality\": \"single\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyDate\": {\r\n        \"id\": \"fv:partyDate\",\r\n        \"displayName\": \"partyDate\",\r\n        \"queryName\": \"fv:partyDate\",\r\n        \"propertyType\": \"datetime\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyHall\": {\r\n        \"id\": \"fv:partyHall\",\r\n        \"displayName\": \"partyHall\",\r\n        \"queryName\": \"fv:partyHall\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    },\r\n    \"fv:partyroute\": {\r\n        \"id\": \"fv:partyroute\",\r\n        \"displayName\": \"partyroute\",\r\n        \"queryName\": \"fv:partyroute\",\r\n        \"propertyType\": \"string\",\r\n        \"cardinality\": \"multi\",\r\n        \"updatability\": \"readwrite\",\r\n        \"isRequired\": true,\r\n        \"isQueryable\": true,\r\n        \"isOrderable\": true\r\n    }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForTypes",
							"item": [
								{
									"name": "PutErrorCaseForTypes(wrong TypeId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3aea0d9-a7c3-42a4-82d5-27aa33dd9857",
												"exec": [
													"pm.test(\"given wrong id in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"appleI\",\r\n                    \"appleII\",\r\n                    \"appleIPO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"powerBookProducts\": {\r\n            \"id\": \"powerBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerBookProducts\",\r\n            \"queryName\": \"powerBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"powerMacProducts\": {\r\n            \"id\": \"powerMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacProducts\",\r\n            \"queryName\": \"powerMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/pen90",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"pen90"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorcase(given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edeb51cc-acce-4f94-9cf4-1d5ccc40252b",
												"exec": [
													"pm.test(\"given wrong in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: _metadata not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"id\": \"apple\",\r\n    \"localName\": \"localName\",\r\n    \"localNamespace\": \"localNamespace\",\r\n    \"displayName\": \"apple\",\r\n    \"queryName\": \"apple\",\r\n    \"baseId\": \"cmis:document\",\r\n    \"parentId\": \"cmis:document\",\r\n    \"fileable\": true,\r\n    \"queryable\": true,\r\n    \"fulltextIndexed\": true,\r\n    \"controllablePolicy\": true,\r\n    \"controllableACL\": true,\r\n    \"propertyDefinitions\": {\r\n        \"appleId\": {\r\n            \"id\": \"appleId\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleId\",\r\n            \"queryName\": \"appleId\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleName\": {\r\n            \"id\": \"appleName\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleName\",\r\n            \"queryName\": \"appleName\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false\r\n        },\r\n        \"appleProducts\": {\r\n            \"id\": \"appleProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleProducts\",\r\n            \"queryName\": \"appleProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"appleProducts\",\r\n                    \"value\": [\r\n                        \"ipad\",\r\n                        \"ios\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"productsType\": {\r\n            \"id\": \"productsType\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"productsType\",\r\n            \"queryName\": \"productsType\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"inherited\": false,\r\n            \"required\": false,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"openChoice\": false,\r\n            \"choice\": [\r\n                {\r\n                    \"displayName\": \"productsType\",\r\n                    \"value\": [\r\n                        \"productA\",\r\n                        \"productB\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"appleTvProducts\": {\r\n            \"id\": \"appleTvProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleTvProducts\",\r\n            \"queryName\": \"appleTvProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n       },\r\n        \"appleWatchProducts\": {\r\n            \"id\": \"appleWatchProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleWatchProducts\",\r\n            \"queryName\": \"appleWatchProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50\r\n        },\r\n        \"appleIpodProducts\": {\r\n            \"id\": \"appleIpodProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"appleIpodProducts\",\r\n            \"queryName\": \"appleIpodProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 50,\r\n\t\t\t\"choice\": [\r\n                {\r\n                    \"displayName\": \"appleIpodProducts\",\r\n                    \"value\": [\r\n                        \"ProductA_firstName\",\r\n                        \"ProductB__middleName\",\r\n\t\t\t\t\t\t\"ProductC__lastName\"\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"macintoshProducts\": {\r\n            \"id\": \"macintoshProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macintoshProducts\",\r\n            \"queryName\": \"macintoshProducts\",\r\n            \"description\": \"description\",\r\n             \"propertyType\": \"string\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 150\r\n        },\r\n\t\t\"iMacProducts\": {\r\n            \"id\": \"iMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iMacProducts\",\r\n            \"queryName\": \"iMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 10\r\n        },\r\n        \"eMacProducts\": {\r\n            \"id\": \"eMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"eMacProducts\",\r\n            \"queryName\": \"eMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"integer\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n            \"maxLength\": 14,\r\n\t\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"eMacProducts\",\r\n                \"value\": [\r\n                    1\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \r\n        \"iBookProducts_type\": {\r\n            \"id\": \"iBookProducts_type\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"iBookProducts_type\",\r\n            \"queryName\": \"iBookProducts_type\",\r\n            \"propertyType\": \"string\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"required\": true,\r\n            \"queryable\": true,\r\n            \"orderable\": true,\r\n            \"choice\": [\r\n            {\r\n                \"displayName\": \"iBookProducts_type\",\r\n                \"value\": [\r\n                    \"appleI\",\r\n                    \"appleII\",\r\n                    \"appleIPO\"\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n\t\t\"macBookproProducts\": {\r\n            \"id\": \"macBookproProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookproProducts\",\r\n            \"queryName\": \"macBookproProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"macBookProducts\": {\r\n            \"id\": \"macBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"macBookProducts\",\r\n            \"queryName\": \"macBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"boolean\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true,\r\n\t\t\"choice\": [\r\n            {\r\n                \"displayName\": \"macBookProducts\",\r\n                \"value\": [\r\n                    true,\r\n\t\t\t\t\tfalse\r\n                ]\r\n            }\r\n        ]\r\n        },\r\n        \"powerBookProducts\": {\r\n            \"id\": \"powerBookProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerBookProducts\",\r\n            \"queryName\": \"powerBookProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n\t\t\"powerMacProducts\": {\r\n            \"id\": \"powerMacProducts\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacProducts\",\r\n            \"queryName\": \"powerMacProducts\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"datetime\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n        },\r\n        \"powerMacBookPros\": {\r\n            \"id\": \"powerMacBookPros\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacBookPros\",\r\n            \"queryName\": \"powerMacBookPros\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"single\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t },\r\n\t\t\t\r\n\t\t \"powerMacPro\": {\r\n            \"id\": \"powerMacPro\",\r\n            \"localName\": \"localName\",\r\n            \"localNamespace\": \"localNamespace\",\r\n            \"displayName\": \"powerMacPro\",\r\n            \"queryName\": \"powerMacPro\",\r\n            \"description\": \"description\",\r\n            \"propertyType\": \"uri\",\r\n            \"cardinality\": \"multi\",\r\n            \"updatability\": \"readwrite\",\r\n            \"isRequired\": true,\r\n            \"isQueryable\": true,\r\n            \"isOrderable\": true\r\n\t\t\t\r\n        },\r\n        \"lastModifiedDate\" : {\r\n            \"id\" : \"lastModifiedDate\",\r\n            \"localName\" : \"localName\",\r\n            \"localNamespace\" : \"localNamespace\",\r\n            \"queryName\" : \"lastModifiedDate\",\r\n            \"description\" : \"lastModifiedDate\",\r\n            \"propertyType\" : \"integer\",\r\n            \"cardinality\" : \"single\",\r\n            \"updatability\" : \"readwrite\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "ErrorCaseForTypes(remove all the data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4098b91-bd53-4fe0-b2c5-b528191138a2",
												"exec": [
													"pm.test(\"remove all the data in Body \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid base type: null\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:party removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db7a9831-3b48-45ab-98a8-234e04fb479d",
												"exec": [
													"pm.test(\"remove all the data in Body \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException: Invalid base type: null\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:party removed TypeId in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57dff0b8-8bd1-49fc-8255-15c7b713dc9c",
												"exec": [
													"pm.test(\"given wrong in URL \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.IllegalArgumentException: Invalid repository ot type ID!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForPutFolder",
									"item": [
										{
											"name": "PutSuccessCase(checking all the Testcases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "898dac4c-ee3a-46bb-96d8-d97954b2d940",
														"exec": [
															"pm.test(\"checking folder under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Folder1');",
															"});",
															"pm.test(\"checking folder under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('1');",
															"});",
															"pm.test(\"checking folder under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:folder');",
															"});",
															"pm.test(\"checking if folder has root as parentId\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Folder1');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"Folder1\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c9b6c191-ed05-4948-9e8a-2edf4587cbb7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56df6dac-5898-4c07-a6eb-bf18e7592292",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutFolder",
									"item": [
										{
											"name": "PutErrorCase(given wrong objecrtId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1af4b352-9f81-46bf-ac18-808070a9b85c",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in  URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"1\",\r\n    \"cmis:name\": \"FolderAB\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/4",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"4"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(given wrong objectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "deabb704-cdbf-4bf7-8218-d52591795a69",
														"exec": [
															"pm.test(\"given wrong baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"90\",\r\n    \"cmis:name\": \"jsdfbsjdfb\",\r\n    \"cmis:objectTypeId\": \"cmis:folder\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/90",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"90"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(removedupdated properties in  the json body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "18cd3ae3-724a-4491-b50f-f0cbbb652d6d",
														"exec": [
															"pm.test(\"given correct URL and removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForPutDocument",
									"item": [
										{
											"name": "PutDocumentSuccessCase(Checking all positive cases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "947c992d-6b23-4974-bf6e-7f9ed018aab0",
														"exec": [
															"pm.test(\"checking document under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Doc12');",
															"});",
															"pm.test(\"checking document under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('2A');",
															"});",
															"pm.test(\"checking document under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:document');",
															"});",
															"pm.test(\"checking document under cmis:path present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/Doc12');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutDocument",
									"item": [
										{
											"name": "PutDocumentErrorCase(given wrong objectId URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "91c0a0c1-ec08-4510-8ccc-4af3ccaa114c",
														"exec": [
															"pm.test(\"given wrong URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutDocumentErrorCase( given wrong cmis:objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "68a95b32-e3ac-42b8-8d4b-66b0e9470266",
														"exec": [
															"pm.test(\"given wrong baseTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"2A\",\r\n    \"cmis:name\": \"Doc12\",\r\n    \"cmis:objectTypeId\": \"cmis:document\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/2",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"2"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcase(removedupdated properties&removed all the json data in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "403e262b-0b3f-46e2-888e-0d9c95798e5c",
														"exec": [
															"pm.test(\" given correct and removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForPutItem",
									"item": [
										{
											"name": "PutItemSuccessCase(checking all the positive TestCases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ad1f81f-fc1f-4d5e-bbaa-3d2d78afb9ed",
														"exec": [
															"pm.test(\"checking item under objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('3A');",
															"});",
															"pm.test(\"checking item under name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('Item3AB');",
															"});",
															"pm.test(\"checking item under objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"checking item under baseTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:baseTypeId\"]).to.eql('cmis:item');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecd16201-6d42-438a-9012-c681213c169e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "080d546a-2ab4-420d-af23-c1abe8ed47b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutItem",
									"item": [
										{
											"name": "PutErrorCaseItem(given wrong objectId inURL &body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "490553af-2bdc-4127-be27-4e068dcd30d0",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL and Body \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"6\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcaseItem(given wrong ObjectTypeId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8937dd4e-4c9c-4aba-8db4-ed336930b95b",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"3A\",\r\n    \"cmis:name\": \"Item3AB\",\r\n    \"cmis:objectTypeId\": \"cmis:item\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCase(removed updtae properties in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b71d318-0ab1-4a24-800a-05e8e20ef9d9",
														"exec": [
															"pm.test(\"given correct URL and removed all th json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForPutPolicy",
									"item": [
										{
											"name": "PutSuccessCasepolicy(checking all the positive Testcases)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40ffc181-f32b-4e86-b7dc-5f78dfb3ee89",
														"exec": [
															"pm.test(\"checking a policy under cmis:name present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:name\"]).to.eql('policy4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('4A');",
															"});",
															"pm.test(\"checking a policy under cmis:objectTypeId present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('cmis:policy');",
															"});",
															"pm.test(\"checking a policy under cmis:policyText present r not\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[\"cmis:policyText\"]).to.eql('AB');",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForPutPolicy",
									"item": [
										{
											"name": "PutErrorcasePolicy(given wrong objectId in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2cb216d1-9d46-4a18-b34e-c6dc43e6dfe6",
														"exec": [
															"pm.test(\"given wrong cmis:objectId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/70",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"70"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorCasePolicy(given wrong objectTypeId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fbce21ae-7052-4199-9c9d-f351fe1e3e2e",
														"exec": [
															"pm.test(\"given wrong cmis:objectTypeId in URL \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"cmis:objectId\": \"4A\",\r\n    \"cmis:name\": \"policy4A\",\r\n    \"cmis:objectTypeId\": \"cmis:policy\",\r\n    \"cmis:policyText\":\"AB\"\r\n}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/78",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"78"
													]
												}
											},
											"response": []
										},
										{
											"name": "PutErrorcase(removedupdated properties&removed all the json data in body)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14cec7b3-d295-46da-8d5c-98fbb0af99d9",
														"exec": [
															"pm.test(\"removed all the json data in body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d311517b-a509-4f7e-a734-8bb3358c66de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a10e036-4d1b-4d9c-bdaf-a5f57480ebc2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForCustomTypes",
							"item": [
								{
									"name": "SuccessCaseCustomType(checking all positive cases)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35ed7fcc-4266-4348-ac56-ca5c80ab69ae",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('11AC');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('AndroidBE');",
													"});",
													"pm.test(\"checking customTypeId under objectTypeId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('apple');",
													"});",
													"pm.test(\"checking customTypeId under appleName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleName\"]).to.eql('APPY');",
													"});",
													"pm.test(\"checking customTypeId under appleId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleId\"]).to.eql('2012');",
													"});",
													"pm.test(\"checking customTypeId under appleProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleProducts\"]).to.eql(\"ipad\");",
													"});",
													"pm.test(\"checking customTypeId under productsType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"productsType\"]).to.eql('ProductABC');",
													"});",
													"pm.test(\"checking customTypeId under appleWatchProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"appleWatchProducts\"]).to.eql([\"WatchA\",\"WatchB\"]);",
													"});",
													"pm.test(\"checking customTypeId under iMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"iMacProducts\"]).to.eql(11);",
													"});",
													"pm.test(\"checking customTypeId under eMacProducts present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"eMacProducts\"]).to.eql([1,2]);",
													"});",
													"pm.test(\"checking customTypeId root as parentId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:path\"]).to.eql('/apple/AndroidBE');",
													"});",
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmis:name\":\"AndroidBE\",\r\n\"cmis:objectId\": \"11AC\",\r\n\"cmis:objectTypeId\": \"apple\",\r\n\"appleId\":\"2012\",\r\n\"appleName\" :\"APPY\",\r\n\"appleProducts\":[\"ipad\"],\r\n\"productsType\":\"ProductABC\",\r\n\"appleWatchProducts\":[\"WatchA\",\"WatchB\"],\r\n\"iMacProducts\" : 11,\r\n\"eMacProducts\" : [1,2],\r\n\"MacProductsdate\":[1355270400000],\r\n\"appleStatus\" : 6,\r\n\"appleSubStatus\" : [0,1,9]\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutSuccessCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "883c6be5-7f12-4ac3-954e-647eec481ef8",
												"exec": [
													"pm.test(\"checking customTypeId under objectId present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectId\"]).to.eql('22');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:name\"]).to.eql('party');",
													"});",
													"pm.test(\"checking customTypeId under name present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"cmis:objectTypeId\"]).to.eql('fv:party');",
													"});",
													"pm.test(\"checking customTypeId under fv:party_firstName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_firstName\"]).to.eql('rohinik');",
													"});",
													"pm.test(\"checking customTypeId under party_email present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_email\"]).to.eql('rohinireddy01.k');",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyType\"]).to.eql('PartyA');",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party\"]).to.eql('partyAB');",
													"});",
													"pm.test(\"checking customTypeId under partyName present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:partyName\"]).to.eql('partyName');",
													"});",
													"pm.test(\"checking customTypeId under salutation present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:salutation\"]).to.eql([\"Mr\",\"Ms\"]);",
													"});",
													"pm.test(\"checking customTypeId under party_office_phone present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:party_office_phone\"]).to.eql(345657568);",
													"});",
													"pm.test(\"checking customTypeId under partyType present r not\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"fv:isPartyType\"]).to.eql(true);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohinik\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"partyAB\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true,\r\n\t\"fv:partyDate\":[1355270400000]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9b939544-134f-4d7b-a80d-8dff6b152ab5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d15b519c-fa27-4335-b482-3720af96f1c8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForCustomTypes",
							"item": [
								{
									"name": "ErrorCaseCustomType(given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7e121e6-44f5-4f3f-8f8c-7394dae3649c",
												"exec": [
													"pm.test(\"given wrong typeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: pen1 not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"party\",\r\n    \"cmis:objectTypeId\": \"apple\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_email\": \"rohinireddy01.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"party\",\r\n    \"fv:partyName\":\"partyName\",\r\n\t\"fv:salutation\":[\"Mr\",\"Ms\"],\r\n\t\"fv:party_office_phone\":345657568,\r\n\t\"fv:isPartyType\":true\r\n}\r\n\r\n\r\n"
										},
										"url": {
											"raw": "{{requestURL}}/pen1/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen1",
												"22"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(removed all the json data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef53fb01-80ec-4371-825b-ebb6fdd90fa8",
												"exec": [
													"pm.test(\" given correct URL removed all the json data in body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.IllegalArgumentException: Properties must not be empty!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{requestURL}}/apple/5",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "PutErrorCase(fv:type given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c556dafc-a6d9-4879-8bfb-83e66749fe68",
												"exec": [
													"pm.test(\"given wrong typeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql('java.lang.Exception: Type: fv:folder not present!');",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmis:objectId\": \"22\",\r\n    \"cmis:name\": \"partyABC\",\r\n    \"cmis:objectTypeId\": \"fv:party\",\r\n    \"fv:party_firstName\": \"rohini\",\r\n    \"fv:party_lastName\":\"kambam\",\r\n    \"fv:party_email\": \"rohini.k\",\r\n    \"fv:partyType\": \"PartyA\",\r\n    \"fv:party\":\"PartyA\",\r\n    \"fv:partyName\":\"birthday\",\r\n    \"fv:partyHall\":\"SVC\",\r\n    \"cmis:baseTypeId\": \"cmis:item\"\r\n}"
										},
										"url": {
											"raw": "{{requestURL}}/fv:folder/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:folder",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "All PUT related Api's",
			"protocolProfileBehavior": {}
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "BASETYPES",
					"item": [
						{
							"name": "CMIS:DOCUMENT",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DocumentSuccessCase ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5f58cbd-3297-4101-8f6e-27d6add5f677",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"2A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/2A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"2A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DocumentErrorCase(given wrong id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ee8f8c7-5756-4c98-a694-9ad51ad483b9",
														"exec": [
															"pm.test(\"given wrong id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/6",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"6"
													]
												}
											},
											"response": []
										},
										{
											"name": "DocumentErrorCase(given wrong id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fc197ec4-303c-480d-a4dc-37ef23a5708c",
														"exec": [
															"pm.test(\"given already deleted  id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type Missmatch or object not found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:document/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:document",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a7d61bcc-a6a1-4ad1-bd5e-f033100fd33c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ac273f0-ce2c-4aa1-a19f-154b11cc654f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:FOLDER",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00dd881c-6eab-400c-8460-0e6ea0db21bd",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"1 Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCase ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb0d585c-f9a2-410c-94ee-c34957f7a31b",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/1",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCase(given wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d703a767-1417-4679-b4e0-621fadd8ff8c",
														"exec": [
															"pm.test(\"given wrong id \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:folder/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:folder",
														"3"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:ITEM",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCaseItem",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40909546-859f-4564-8766-7e32329112fc",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"3A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCaseItem ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "417ff453-68e1-46bf-b4c7-6a1121f7c64f",
														"exec": [
															"pm.test(\"given alraedy deleted id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/3",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCaseItem (given wrong objectId)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93c5a3d7-a730-4a3b-a9f2-2e047489d3d6",
														"exec": [
															"pm.test(\"given wrong id in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:item/35",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:item",
														"35"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CMIS:POLICY",
							"item": [
								{
									"name": "SuccessCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteSuccessCasePolicy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "336a77e4-eeb4-436f-b5cb-daf7e4dc4fce",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"4A Deleted Successfully\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/4A",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"4A"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ErrorCaseForDeleteDocument",
									"item": [
										{
											"name": "DeleteErrorCasePolicy(given wrong Id in URL)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "740186a0-2224-4d3c-9eaf-66f09333c49c",
														"exec": [
															"pm.test(\"deleted Successfully\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:policy/44",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:policy",
														"44"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteErrorCasePolicy(given wrong objectTypeId) ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "46318107-e6b9-408f-a0b0-c1a56225509d",
														"exec": [
															"pm.test(\"given wrong objectTypeId in URL\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: cmis:Item not present!\");",
															"});",
															"pm.test(\"Status code is 503\", function () {",
															"    pm.response.to.have.status(503);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{USERNAME}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{PASSWORD}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{requestURL}}/cmis:Item/45",
													"host": [
														"{{requestURL}}"
													],
													"path": [
														"cmis:Item",
														"45"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c81f0a09-f2ad-486d-9dac-7045614f1f67",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6694880-d7c5-4a18-b836-f8dcc748a32d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CUSTOMTYPES",
					"item": [
						{
							"name": "SuccessCaseForCustomType",
							"item": [
								{
									"name": "DeleteSuccessCaseForCustomObject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c365f33f-5856-4e5b-b08f-ff66dfdd90e7",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"11AC Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/apple/11AC",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"apple",
												"11AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteSuccessCase(fv:type )",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "179eda02-cfb9-4228-845f-a5471d308a83",
												"exec": [
													"pm.test(\"deleted objectId Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"22 Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:party/22",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:party",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForCustomTypes",
							"item": [
								{
									"name": "DeleteCustom TypeErrorCase(given wrong TypeId)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b8a9cec-23f4-490f-b7ca-a0a35d9adc67",
												"exec": [
													"pm.test(\"given wrong TypeId in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: pen56 not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/pen56/5",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"pen56",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteErrorCase(fv:type given wrong URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f48b7744-a0ab-407e-b4ed-28e60d8c0099",
												"exec": [
													"pm.test(\"given wrong id in URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: fv:partyught not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/fv:partyught/28",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"fv:partyught",
												"28"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "TYPES",
					"item": [
						{
							"name": "SuccessCaseforDeleteType",
							"item": [
								{
									"name": "DeleteSuccessCaseforType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11bbd8f2-1d71-4221-8f21-db0e98c5b293",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"apple Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteSuccesCase(fv:party)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2d53ef6-66c2-46bc-a11d-69e64050a002",
												"exec": [
													"pm.test(\"deleted Id Successfully\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"fv:party Deleted Successfully\");",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/fv%3Aparty",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"fv%3Aparty"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ErrorCaseForDeleteType",
							"item": [
								{
									"name": "DeleteErrorcase",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5149942-6081-4520-ba22-3e4ef3a953ca",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException: Not Found\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/type/apple18",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"type",
												"apple18"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteErrorCaseForTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47e882ff-6382-4370-97ab-76e828ceac81",
												"exec": [
													"pm.test(\"given wrong URL\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(\"java.lang.Exception: Type: _metadata not present!\");",
													"});",
													"pm.test(\"Status code is 503\", function () {",
													"    pm.response.to.have.status(503);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{requestURL}}/_metadata/types/apple18",
											"host": [
												"{{requestURL}}"
											],
											"path": [
												"_metadata",
												"types",
												"apple18"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "All DELETE realted Api's testing",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}